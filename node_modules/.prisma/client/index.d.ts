
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: string
  firstname: string
  email: string
  password: string
  age: number | null
  role: Role
  profilePic: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Guardian
 * 
 */
export type Guardian = {
  id: string
  father: string
  mother: string
  other: string
  userId: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model UserAddress
 * 
 */
export type UserAddress = {
  id: string
  phoneNumber: string
  GPS: string
  NearestLandMark: string
  userId: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Class
 * 
 */
export type Class = {
  id: string
  classType: string
  numOfStudents: number
  teacher: Role
  userId: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model School
 * 
 */
export type School = {
  id: string
  schoolName: string
  email: string
  password: string
  dateOfestablishment: string | null
  NumOfStudents: number | null
  NumOfTeachers: number | null
  NumOfNonTeachingStaff: number | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model SchoolAddress
 * 
 */
export type SchoolAddress = {
  id: string
  schoolId: string
  location: string[]
  POBox: string
  email: string
  website: string | null
  GPS: string
  createdAt: Date
  updatedAt: Date
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const Role: {
  student: 'student',
  teacher: 'teacher',
  headmaster: 'headmaster',
  proprietor: 'proprietor',
  nonteaching: 'nonteaching'
};

export type Role = (typeof Role)[keyof typeof Role]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.guardian`: Exposes CRUD operations for the **Guardian** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Guardians
    * const guardians = await prisma.guardian.findMany()
    * ```
    */
  get guardian(): Prisma.GuardianDelegate<GlobalReject>;

  /**
   * `prisma.userAddress`: Exposes CRUD operations for the **UserAddress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserAddresses
    * const userAddresses = await prisma.userAddress.findMany()
    * ```
    */
  get userAddress(): Prisma.UserAddressDelegate<GlobalReject>;

  /**
   * `prisma.class`: Exposes CRUD operations for the **Class** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Classes
    * const classes = await prisma.class.findMany()
    * ```
    */
  get class(): Prisma.ClassDelegate<GlobalReject>;

  /**
   * `prisma.school`: Exposes CRUD operations for the **School** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Schools
    * const schools = await prisma.school.findMany()
    * ```
    */
  get school(): Prisma.SchoolDelegate<GlobalReject>;

  /**
   * `prisma.schoolAddress`: Exposes CRUD operations for the **SchoolAddress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SchoolAddresses
    * const schoolAddresses = await prisma.schoolAddress.findMany()
    * ```
    */
  get schoolAddress(): Prisma.SchoolAddressDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.4.0
   * Query Engine version: f352a33b70356f46311da8b00d83386dd9f145d6
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export import FieldRef = runtime.FieldRef

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Guardian: 'Guardian',
    UserAddress: 'UserAddress',
    Class: 'Class',
    School: 'School',
    SchoolAddress: 'SchoolAddress'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    address: number
    guardian: number
    class: number
  }

  export type UserCountOutputTypeSelect = {
    address?: boolean
    guardian?: boolean
    class?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type SchoolCountOutputType
   */


  export type SchoolCountOutputType = {
    address: number
  }

  export type SchoolCountOutputTypeSelect = {
    address?: boolean
  }

  export type SchoolCountOutputTypeGetPayload<
    S extends boolean | null | undefined | SchoolCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? SchoolCountOutputType
    : S extends undefined
    ? never
    : S extends SchoolCountOutputTypeArgs
    ?'include' extends U
    ? SchoolCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof SchoolCountOutputType ? SchoolCountOutputType[P] : never
  } 
    : SchoolCountOutputType
  : SchoolCountOutputType




  // Custom InputTypes

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SchoolCountOutputType
     * 
    **/
    select?: SchoolCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    age: number | null
  }

  export type UserSumAggregateOutputType = {
    age: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    firstname: string | null
    email: string | null
    password: string | null
    age: number | null
    role: Role | null
    profilePic: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    firstname: string | null
    email: string | null
    password: string | null
    age: number | null
    role: Role | null
    profilePic: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstname: number
    email: number
    password: number
    age: number
    role: number
    profilePic: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    age?: true
  }

  export type UserSumAggregateInputType = {
    age?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    firstname?: true
    email?: true
    password?: true
    age?: true
    role?: true
    profilePic?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstname?: true
    email?: true
    password?: true
    age?: true
    role?: true
    profilePic?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstname?: true
    email?: true
    password?: true
    age?: true
    role?: true
    profilePic?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    firstname: string
    email: string
    password: string
    age: number | null
    role: Role
    profilePic: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    firstname?: boolean
    email?: boolean
    password?: boolean
    age?: boolean
    role?: boolean
    address?: boolean | UserAddressFindManyArgs
    profilePic?: boolean
    guardian?: boolean | GuardianFindManyArgs
    class?: boolean | ClassFindManyArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    address?: boolean | UserAddressFindManyArgs
    guardian?: boolean | GuardianFindManyArgs
    class?: boolean | ClassFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'address' ? Array < UserAddressGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'guardian' ? Array < GuardianGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'class' ? Array < ClassGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'address' ? Array < UserAddressGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'guardian' ? Array < GuardianGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'class' ? Array < ClassGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null, null>, Prisma__UserClient<UserGetPayload<T> | null, null>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null, null>, Prisma__UserClient<UserGetPayload<T> | null, null>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find one User that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    address<T extends UserAddressFindManyArgs = {}>(args?: Subset<T, UserAddressFindManyArgs>): CheckSelect<T, PrismaPromise<Array<UserAddress>| Null>, PrismaPromise<Array<UserAddressGetPayload<T>>| Null>>;

    guardian<T extends GuardianFindManyArgs = {}>(args?: Subset<T, GuardianFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Guardian>| Null>, PrismaPromise<Array<GuardianGetPayload<T>>| Null>>;

    class<T extends ClassFindManyArgs = {}>(args?: Subset<T, ClassFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Class>| Null>, PrismaPromise<Array<ClassGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }

  /**
   * User: findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User: findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User: findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = UserFindUniqueArgsBase
      

  /**
   * User: findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = UserFindFirstArgsBase
      

  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Guardian
   */


  export type AggregateGuardian = {
    _count: GuardianCountAggregateOutputType | null
    _min: GuardianMinAggregateOutputType | null
    _max: GuardianMaxAggregateOutputType | null
  }

  export type GuardianMinAggregateOutputType = {
    id: string | null
    father: string | null
    mother: string | null
    other: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GuardianMaxAggregateOutputType = {
    id: string | null
    father: string | null
    mother: string | null
    other: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GuardianCountAggregateOutputType = {
    id: number
    father: number
    mother: number
    other: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GuardianMinAggregateInputType = {
    id?: true
    father?: true
    mother?: true
    other?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GuardianMaxAggregateInputType = {
    id?: true
    father?: true
    mother?: true
    other?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GuardianCountAggregateInputType = {
    id?: true
    father?: true
    mother?: true
    other?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GuardianAggregateArgs = {
    /**
     * Filter which Guardian to aggregate.
     * 
    **/
    where?: GuardianWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guardians to fetch.
     * 
    **/
    orderBy?: Enumerable<GuardianOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: GuardianWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guardians from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guardians.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Guardians
    **/
    _count?: true | GuardianCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GuardianMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GuardianMaxAggregateInputType
  }

  export type GetGuardianAggregateType<T extends GuardianAggregateArgs> = {
        [P in keyof T & keyof AggregateGuardian]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGuardian[P]>
      : GetScalarType<T[P], AggregateGuardian[P]>
  }




  export type GuardianGroupByArgs = {
    where?: GuardianWhereInput
    orderBy?: Enumerable<GuardianOrderByWithAggregationInput>
    by: Array<GuardianScalarFieldEnum>
    having?: GuardianScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GuardianCountAggregateInputType | true
    _min?: GuardianMinAggregateInputType
    _max?: GuardianMaxAggregateInputType
  }


  export type GuardianGroupByOutputType = {
    id: string
    father: string
    mother: string
    other: string
    userId: string
    createdAt: Date
    updatedAt: Date
    _count: GuardianCountAggregateOutputType | null
    _min: GuardianMinAggregateOutputType | null
    _max: GuardianMaxAggregateOutputType | null
  }

  type GetGuardianGroupByPayload<T extends GuardianGroupByArgs> = PrismaPromise<
    Array<
      PickArray<GuardianGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GuardianGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GuardianGroupByOutputType[P]>
            : GetScalarType<T[P], GuardianGroupByOutputType[P]>
        }
      >
    >


  export type GuardianSelect = {
    id?: boolean
    father?: boolean
    mother?: boolean
    other?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GuardianInclude = {
    user?: boolean | UserArgs
  }

  export type GuardianGetPayload<
    S extends boolean | null | undefined | GuardianArgs,
    U = keyof S
      > = S extends true
        ? Guardian
    : S extends undefined
    ? never
    : S extends GuardianArgs | GuardianFindManyArgs
    ?'include' extends U
    ? Guardian  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Guardian ? Guardian[P] : never
  } 
    : Guardian
  : Guardian


  type GuardianCountArgs = Merge<
    Omit<GuardianFindManyArgs, 'select' | 'include'> & {
      select?: GuardianCountAggregateInputType | true
    }
  >

  export interface GuardianDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Guardian that matches the filter.
     * @param {GuardianFindUniqueArgs} args - Arguments to find a Guardian
     * @example
     * // Get one Guardian
     * const guardian = await prisma.guardian.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GuardianFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GuardianFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Guardian'> extends True ? CheckSelect<T, Prisma__GuardianClient<Guardian>, Prisma__GuardianClient<GuardianGetPayload<T>>> : CheckSelect<T, Prisma__GuardianClient<Guardian | null, null>, Prisma__GuardianClient<GuardianGetPayload<T> | null, null>>

    /**
     * Find the first Guardian that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuardianFindFirstArgs} args - Arguments to find a Guardian
     * @example
     * // Get one Guardian
     * const guardian = await prisma.guardian.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GuardianFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GuardianFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Guardian'> extends True ? CheckSelect<T, Prisma__GuardianClient<Guardian>, Prisma__GuardianClient<GuardianGetPayload<T>>> : CheckSelect<T, Prisma__GuardianClient<Guardian | null, null>, Prisma__GuardianClient<GuardianGetPayload<T> | null, null>>

    /**
     * Find zero or more Guardians that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuardianFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Guardians
     * const guardians = await prisma.guardian.findMany()
     * 
     * // Get first 10 Guardians
     * const guardians = await prisma.guardian.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const guardianWithIdOnly = await prisma.guardian.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GuardianFindManyArgs>(
      args?: SelectSubset<T, GuardianFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Guardian>>, PrismaPromise<Array<GuardianGetPayload<T>>>>

    /**
     * Create a Guardian.
     * @param {GuardianCreateArgs} args - Arguments to create a Guardian.
     * @example
     * // Create one Guardian
     * const Guardian = await prisma.guardian.create({
     *   data: {
     *     // ... data to create a Guardian
     *   }
     * })
     * 
    **/
    create<T extends GuardianCreateArgs>(
      args: SelectSubset<T, GuardianCreateArgs>
    ): CheckSelect<T, Prisma__GuardianClient<Guardian>, Prisma__GuardianClient<GuardianGetPayload<T>>>

    /**
     * Create many Guardians.
     *     @param {GuardianCreateManyArgs} args - Arguments to create many Guardians.
     *     @example
     *     // Create many Guardians
     *     const guardian = await prisma.guardian.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GuardianCreateManyArgs>(
      args?: SelectSubset<T, GuardianCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Guardian.
     * @param {GuardianDeleteArgs} args - Arguments to delete one Guardian.
     * @example
     * // Delete one Guardian
     * const Guardian = await prisma.guardian.delete({
     *   where: {
     *     // ... filter to delete one Guardian
     *   }
     * })
     * 
    **/
    delete<T extends GuardianDeleteArgs>(
      args: SelectSubset<T, GuardianDeleteArgs>
    ): CheckSelect<T, Prisma__GuardianClient<Guardian>, Prisma__GuardianClient<GuardianGetPayload<T>>>

    /**
     * Update one Guardian.
     * @param {GuardianUpdateArgs} args - Arguments to update one Guardian.
     * @example
     * // Update one Guardian
     * const guardian = await prisma.guardian.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GuardianUpdateArgs>(
      args: SelectSubset<T, GuardianUpdateArgs>
    ): CheckSelect<T, Prisma__GuardianClient<Guardian>, Prisma__GuardianClient<GuardianGetPayload<T>>>

    /**
     * Delete zero or more Guardians.
     * @param {GuardianDeleteManyArgs} args - Arguments to filter Guardians to delete.
     * @example
     * // Delete a few Guardians
     * const { count } = await prisma.guardian.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GuardianDeleteManyArgs>(
      args?: SelectSubset<T, GuardianDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Guardians.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuardianUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Guardians
     * const guardian = await prisma.guardian.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GuardianUpdateManyArgs>(
      args: SelectSubset<T, GuardianUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Guardian.
     * @param {GuardianUpsertArgs} args - Arguments to update or create a Guardian.
     * @example
     * // Update or create a Guardian
     * const guardian = await prisma.guardian.upsert({
     *   create: {
     *     // ... data to create a Guardian
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Guardian we want to update
     *   }
     * })
    **/
    upsert<T extends GuardianUpsertArgs>(
      args: SelectSubset<T, GuardianUpsertArgs>
    ): CheckSelect<T, Prisma__GuardianClient<Guardian>, Prisma__GuardianClient<GuardianGetPayload<T>>>

    /**
     * Find one Guardian that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {GuardianFindUniqueOrThrowArgs} args - Arguments to find a Guardian
     * @example
     * // Get one Guardian
     * const guardian = await prisma.guardian.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GuardianFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GuardianFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__GuardianClient<Guardian>, Prisma__GuardianClient<GuardianGetPayload<T>>>

    /**
     * Find the first Guardian that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuardianFindFirstOrThrowArgs} args - Arguments to find a Guardian
     * @example
     * // Get one Guardian
     * const guardian = await prisma.guardian.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GuardianFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GuardianFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__GuardianClient<Guardian>, Prisma__GuardianClient<GuardianGetPayload<T>>>

    /**
     * Count the number of Guardians.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuardianCountArgs} args - Arguments to filter Guardians to count.
     * @example
     * // Count the number of Guardians
     * const count = await prisma.guardian.count({
     *   where: {
     *     // ... the filter for the Guardians we want to count
     *   }
     * })
    **/
    count<T extends GuardianCountArgs>(
      args?: Subset<T, GuardianCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GuardianCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Guardian.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuardianAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GuardianAggregateArgs>(args: Subset<T, GuardianAggregateArgs>): PrismaPromise<GetGuardianAggregateType<T>>

    /**
     * Group by Guardian.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuardianGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GuardianGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GuardianGroupByArgs['orderBy'] }
        : { orderBy?: GuardianGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GuardianGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGuardianGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Guardian.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GuardianClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | Null>, Prisma__UserClient<UserGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Guardian base type for findUnique actions
   */
  export type GuardianFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Guardian
     * 
    **/
    select?: GuardianSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuardianInclude | null
    /**
     * Filter, which Guardian to fetch.
     * 
    **/
    where: GuardianWhereUniqueInput
  }

  /**
   * Guardian: findUnique
   */
  export interface GuardianFindUniqueArgs extends GuardianFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Guardian base type for findFirst actions
   */
  export type GuardianFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Guardian
     * 
    **/
    select?: GuardianSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuardianInclude | null
    /**
     * Filter, which Guardian to fetch.
     * 
    **/
    where?: GuardianWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guardians to fetch.
     * 
    **/
    orderBy?: Enumerable<GuardianOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Guardians.
     * 
    **/
    cursor?: GuardianWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guardians from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guardians.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Guardians.
     * 
    **/
    distinct?: Enumerable<GuardianScalarFieldEnum>
  }

  /**
   * Guardian: findFirst
   */
  export interface GuardianFindFirstArgs extends GuardianFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Guardian findMany
   */
  export type GuardianFindManyArgs = {
    /**
     * Select specific fields to fetch from the Guardian
     * 
    **/
    select?: GuardianSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuardianInclude | null
    /**
     * Filter, which Guardians to fetch.
     * 
    **/
    where?: GuardianWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guardians to fetch.
     * 
    **/
    orderBy?: Enumerable<GuardianOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Guardians.
     * 
    **/
    cursor?: GuardianWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guardians from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guardians.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GuardianScalarFieldEnum>
  }


  /**
   * Guardian create
   */
  export type GuardianCreateArgs = {
    /**
     * Select specific fields to fetch from the Guardian
     * 
    **/
    select?: GuardianSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuardianInclude | null
    /**
     * The data needed to create a Guardian.
     * 
    **/
    data: XOR<GuardianCreateInput, GuardianUncheckedCreateInput>
  }


  /**
   * Guardian createMany
   */
  export type GuardianCreateManyArgs = {
    /**
     * The data used to create many Guardians.
     * 
    **/
    data: Enumerable<GuardianCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Guardian update
   */
  export type GuardianUpdateArgs = {
    /**
     * Select specific fields to fetch from the Guardian
     * 
    **/
    select?: GuardianSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuardianInclude | null
    /**
     * The data needed to update a Guardian.
     * 
    **/
    data: XOR<GuardianUpdateInput, GuardianUncheckedUpdateInput>
    /**
     * Choose, which Guardian to update.
     * 
    **/
    where: GuardianWhereUniqueInput
  }


  /**
   * Guardian updateMany
   */
  export type GuardianUpdateManyArgs = {
    /**
     * The data used to update Guardians.
     * 
    **/
    data: XOR<GuardianUpdateManyMutationInput, GuardianUncheckedUpdateManyInput>
    /**
     * Filter which Guardians to update
     * 
    **/
    where?: GuardianWhereInput
  }


  /**
   * Guardian upsert
   */
  export type GuardianUpsertArgs = {
    /**
     * Select specific fields to fetch from the Guardian
     * 
    **/
    select?: GuardianSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuardianInclude | null
    /**
     * The filter to search for the Guardian to update in case it exists.
     * 
    **/
    where: GuardianWhereUniqueInput
    /**
     * In case the Guardian found by the `where` argument doesn't exist, create a new Guardian with this data.
     * 
    **/
    create: XOR<GuardianCreateInput, GuardianUncheckedCreateInput>
    /**
     * In case the Guardian was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<GuardianUpdateInput, GuardianUncheckedUpdateInput>
  }


  /**
   * Guardian delete
   */
  export type GuardianDeleteArgs = {
    /**
     * Select specific fields to fetch from the Guardian
     * 
    **/
    select?: GuardianSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuardianInclude | null
    /**
     * Filter which Guardian to delete.
     * 
    **/
    where: GuardianWhereUniqueInput
  }


  /**
   * Guardian deleteMany
   */
  export type GuardianDeleteManyArgs = {
    /**
     * Filter which Guardians to delete
     * 
    **/
    where?: GuardianWhereInput
  }


  /**
   * Guardian: findUniqueOrThrow
   */
  export type GuardianFindUniqueOrThrowArgs = GuardianFindUniqueArgsBase
      

  /**
   * Guardian: findFirstOrThrow
   */
  export type GuardianFindFirstOrThrowArgs = GuardianFindFirstArgsBase
      

  /**
   * Guardian without action
   */
  export type GuardianArgs = {
    /**
     * Select specific fields to fetch from the Guardian
     * 
    **/
    select?: GuardianSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuardianInclude | null
  }



  /**
   * Model UserAddress
   */


  export type AggregateUserAddress = {
    _count: UserAddressCountAggregateOutputType | null
    _min: UserAddressMinAggregateOutputType | null
    _max: UserAddressMaxAggregateOutputType | null
  }

  export type UserAddressMinAggregateOutputType = {
    id: string | null
    phoneNumber: string | null
    GPS: string | null
    NearestLandMark: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserAddressMaxAggregateOutputType = {
    id: string | null
    phoneNumber: string | null
    GPS: string | null
    NearestLandMark: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserAddressCountAggregateOutputType = {
    id: number
    phoneNumber: number
    GPS: number
    NearestLandMark: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAddressMinAggregateInputType = {
    id?: true
    phoneNumber?: true
    GPS?: true
    NearestLandMark?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserAddressMaxAggregateInputType = {
    id?: true
    phoneNumber?: true
    GPS?: true
    NearestLandMark?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserAddressCountAggregateInputType = {
    id?: true
    phoneNumber?: true
    GPS?: true
    NearestLandMark?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAddressAggregateArgs = {
    /**
     * Filter which UserAddress to aggregate.
     * 
    **/
    where?: UserAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAddresses to fetch.
     * 
    **/
    orderBy?: Enumerable<UserAddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAddresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAddresses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserAddresses
    **/
    _count?: true | UserAddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserAddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserAddressMaxAggregateInputType
  }

  export type GetUserAddressAggregateType<T extends UserAddressAggregateArgs> = {
        [P in keyof T & keyof AggregateUserAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserAddress[P]>
      : GetScalarType<T[P], AggregateUserAddress[P]>
  }




  export type UserAddressGroupByArgs = {
    where?: UserAddressWhereInput
    orderBy?: Enumerable<UserAddressOrderByWithAggregationInput>
    by: Array<UserAddressScalarFieldEnum>
    having?: UserAddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserAddressCountAggregateInputType | true
    _min?: UserAddressMinAggregateInputType
    _max?: UserAddressMaxAggregateInputType
  }


  export type UserAddressGroupByOutputType = {
    id: string
    phoneNumber: string
    GPS: string
    NearestLandMark: string
    userId: string
    createdAt: Date
    updatedAt: Date
    _count: UserAddressCountAggregateOutputType | null
    _min: UserAddressMinAggregateOutputType | null
    _max: UserAddressMaxAggregateOutputType | null
  }

  type GetUserAddressGroupByPayload<T extends UserAddressGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserAddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserAddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserAddressGroupByOutputType[P]>
            : GetScalarType<T[P], UserAddressGroupByOutputType[P]>
        }
      >
    >


  export type UserAddressSelect = {
    id?: boolean
    phoneNumber?: boolean
    GPS?: boolean
    NearestLandMark?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserAddressInclude = {
    user?: boolean | UserArgs
  }

  export type UserAddressGetPayload<
    S extends boolean | null | undefined | UserAddressArgs,
    U = keyof S
      > = S extends true
        ? UserAddress
    : S extends undefined
    ? never
    : S extends UserAddressArgs | UserAddressFindManyArgs
    ?'include' extends U
    ? UserAddress  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof UserAddress ? UserAddress[P] : never
  } 
    : UserAddress
  : UserAddress


  type UserAddressCountArgs = Merge<
    Omit<UserAddressFindManyArgs, 'select' | 'include'> & {
      select?: UserAddressCountAggregateInputType | true
    }
  >

  export interface UserAddressDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one UserAddress that matches the filter.
     * @param {UserAddressFindUniqueArgs} args - Arguments to find a UserAddress
     * @example
     * // Get one UserAddress
     * const userAddress = await prisma.userAddress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserAddressFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserAddressFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserAddress'> extends True ? CheckSelect<T, Prisma__UserAddressClient<UserAddress>, Prisma__UserAddressClient<UserAddressGetPayload<T>>> : CheckSelect<T, Prisma__UserAddressClient<UserAddress | null, null>, Prisma__UserAddressClient<UserAddressGetPayload<T> | null, null>>

    /**
     * Find the first UserAddress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAddressFindFirstArgs} args - Arguments to find a UserAddress
     * @example
     * // Get one UserAddress
     * const userAddress = await prisma.userAddress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserAddressFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserAddressFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserAddress'> extends True ? CheckSelect<T, Prisma__UserAddressClient<UserAddress>, Prisma__UserAddressClient<UserAddressGetPayload<T>>> : CheckSelect<T, Prisma__UserAddressClient<UserAddress | null, null>, Prisma__UserAddressClient<UserAddressGetPayload<T> | null, null>>

    /**
     * Find zero or more UserAddresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAddressFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserAddresses
     * const userAddresses = await prisma.userAddress.findMany()
     * 
     * // Get first 10 UserAddresses
     * const userAddresses = await prisma.userAddress.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userAddressWithIdOnly = await prisma.userAddress.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserAddressFindManyArgs>(
      args?: SelectSubset<T, UserAddressFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<UserAddress>>, PrismaPromise<Array<UserAddressGetPayload<T>>>>

    /**
     * Create a UserAddress.
     * @param {UserAddressCreateArgs} args - Arguments to create a UserAddress.
     * @example
     * // Create one UserAddress
     * const UserAddress = await prisma.userAddress.create({
     *   data: {
     *     // ... data to create a UserAddress
     *   }
     * })
     * 
    **/
    create<T extends UserAddressCreateArgs>(
      args: SelectSubset<T, UserAddressCreateArgs>
    ): CheckSelect<T, Prisma__UserAddressClient<UserAddress>, Prisma__UserAddressClient<UserAddressGetPayload<T>>>

    /**
     * Create many UserAddresses.
     *     @param {UserAddressCreateManyArgs} args - Arguments to create many UserAddresses.
     *     @example
     *     // Create many UserAddresses
     *     const userAddress = await prisma.userAddress.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserAddressCreateManyArgs>(
      args?: SelectSubset<T, UserAddressCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a UserAddress.
     * @param {UserAddressDeleteArgs} args - Arguments to delete one UserAddress.
     * @example
     * // Delete one UserAddress
     * const UserAddress = await prisma.userAddress.delete({
     *   where: {
     *     // ... filter to delete one UserAddress
     *   }
     * })
     * 
    **/
    delete<T extends UserAddressDeleteArgs>(
      args: SelectSubset<T, UserAddressDeleteArgs>
    ): CheckSelect<T, Prisma__UserAddressClient<UserAddress>, Prisma__UserAddressClient<UserAddressGetPayload<T>>>

    /**
     * Update one UserAddress.
     * @param {UserAddressUpdateArgs} args - Arguments to update one UserAddress.
     * @example
     * // Update one UserAddress
     * const userAddress = await prisma.userAddress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserAddressUpdateArgs>(
      args: SelectSubset<T, UserAddressUpdateArgs>
    ): CheckSelect<T, Prisma__UserAddressClient<UserAddress>, Prisma__UserAddressClient<UserAddressGetPayload<T>>>

    /**
     * Delete zero or more UserAddresses.
     * @param {UserAddressDeleteManyArgs} args - Arguments to filter UserAddresses to delete.
     * @example
     * // Delete a few UserAddresses
     * const { count } = await prisma.userAddress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserAddressDeleteManyArgs>(
      args?: SelectSubset<T, UserAddressDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserAddresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserAddresses
     * const userAddress = await prisma.userAddress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserAddressUpdateManyArgs>(
      args: SelectSubset<T, UserAddressUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserAddress.
     * @param {UserAddressUpsertArgs} args - Arguments to update or create a UserAddress.
     * @example
     * // Update or create a UserAddress
     * const userAddress = await prisma.userAddress.upsert({
     *   create: {
     *     // ... data to create a UserAddress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserAddress we want to update
     *   }
     * })
    **/
    upsert<T extends UserAddressUpsertArgs>(
      args: SelectSubset<T, UserAddressUpsertArgs>
    ): CheckSelect<T, Prisma__UserAddressClient<UserAddress>, Prisma__UserAddressClient<UserAddressGetPayload<T>>>

    /**
     * Find one UserAddress that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserAddressFindUniqueOrThrowArgs} args - Arguments to find a UserAddress
     * @example
     * // Get one UserAddress
     * const userAddress = await prisma.userAddress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserAddressFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserAddressFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UserAddressClient<UserAddress>, Prisma__UserAddressClient<UserAddressGetPayload<T>>>

    /**
     * Find the first UserAddress that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAddressFindFirstOrThrowArgs} args - Arguments to find a UserAddress
     * @example
     * // Get one UserAddress
     * const userAddress = await prisma.userAddress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserAddressFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserAddressFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UserAddressClient<UserAddress>, Prisma__UserAddressClient<UserAddressGetPayload<T>>>

    /**
     * Count the number of UserAddresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAddressCountArgs} args - Arguments to filter UserAddresses to count.
     * @example
     * // Count the number of UserAddresses
     * const count = await prisma.userAddress.count({
     *   where: {
     *     // ... the filter for the UserAddresses we want to count
     *   }
     * })
    **/
    count<T extends UserAddressCountArgs>(
      args?: Subset<T, UserAddressCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserAddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserAddress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAddressAggregateArgs>(args: Subset<T, UserAddressAggregateArgs>): PrismaPromise<GetUserAddressAggregateType<T>>

    /**
     * Group by UserAddress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserAddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserAddressGroupByArgs['orderBy'] }
        : { orderBy?: UserAddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserAddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserAddressGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for UserAddress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserAddressClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | Null>, Prisma__UserClient<UserGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * UserAddress base type for findUnique actions
   */
  export type UserAddressFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the UserAddress
     * 
    **/
    select?: UserAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAddressInclude | null
    /**
     * Filter, which UserAddress to fetch.
     * 
    **/
    where: UserAddressWhereUniqueInput
  }

  /**
   * UserAddress: findUnique
   */
  export interface UserAddressFindUniqueArgs extends UserAddressFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserAddress base type for findFirst actions
   */
  export type UserAddressFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the UserAddress
     * 
    **/
    select?: UserAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAddressInclude | null
    /**
     * Filter, which UserAddress to fetch.
     * 
    **/
    where?: UserAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAddresses to fetch.
     * 
    **/
    orderBy?: Enumerable<UserAddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAddresses.
     * 
    **/
    cursor?: UserAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAddresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAddresses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAddresses.
     * 
    **/
    distinct?: Enumerable<UserAddressScalarFieldEnum>
  }

  /**
   * UserAddress: findFirst
   */
  export interface UserAddressFindFirstArgs extends UserAddressFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserAddress findMany
   */
  export type UserAddressFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserAddress
     * 
    **/
    select?: UserAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAddressInclude | null
    /**
     * Filter, which UserAddresses to fetch.
     * 
    **/
    where?: UserAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAddresses to fetch.
     * 
    **/
    orderBy?: Enumerable<UserAddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserAddresses.
     * 
    **/
    cursor?: UserAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAddresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAddresses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserAddressScalarFieldEnum>
  }


  /**
   * UserAddress create
   */
  export type UserAddressCreateArgs = {
    /**
     * Select specific fields to fetch from the UserAddress
     * 
    **/
    select?: UserAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAddressInclude | null
    /**
     * The data needed to create a UserAddress.
     * 
    **/
    data: XOR<UserAddressCreateInput, UserAddressUncheckedCreateInput>
  }


  /**
   * UserAddress createMany
   */
  export type UserAddressCreateManyArgs = {
    /**
     * The data used to create many UserAddresses.
     * 
    **/
    data: Enumerable<UserAddressCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserAddress update
   */
  export type UserAddressUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserAddress
     * 
    **/
    select?: UserAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAddressInclude | null
    /**
     * The data needed to update a UserAddress.
     * 
    **/
    data: XOR<UserAddressUpdateInput, UserAddressUncheckedUpdateInput>
    /**
     * Choose, which UserAddress to update.
     * 
    **/
    where: UserAddressWhereUniqueInput
  }


  /**
   * UserAddress updateMany
   */
  export type UserAddressUpdateManyArgs = {
    /**
     * The data used to update UserAddresses.
     * 
    **/
    data: XOR<UserAddressUpdateManyMutationInput, UserAddressUncheckedUpdateManyInput>
    /**
     * Filter which UserAddresses to update
     * 
    **/
    where?: UserAddressWhereInput
  }


  /**
   * UserAddress upsert
   */
  export type UserAddressUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserAddress
     * 
    **/
    select?: UserAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAddressInclude | null
    /**
     * The filter to search for the UserAddress to update in case it exists.
     * 
    **/
    where: UserAddressWhereUniqueInput
    /**
     * In case the UserAddress found by the `where` argument doesn't exist, create a new UserAddress with this data.
     * 
    **/
    create: XOR<UserAddressCreateInput, UserAddressUncheckedCreateInput>
    /**
     * In case the UserAddress was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserAddressUpdateInput, UserAddressUncheckedUpdateInput>
  }


  /**
   * UserAddress delete
   */
  export type UserAddressDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserAddress
     * 
    **/
    select?: UserAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAddressInclude | null
    /**
     * Filter which UserAddress to delete.
     * 
    **/
    where: UserAddressWhereUniqueInput
  }


  /**
   * UserAddress deleteMany
   */
  export type UserAddressDeleteManyArgs = {
    /**
     * Filter which UserAddresses to delete
     * 
    **/
    where?: UserAddressWhereInput
  }


  /**
   * UserAddress: findUniqueOrThrow
   */
  export type UserAddressFindUniqueOrThrowArgs = UserAddressFindUniqueArgsBase
      

  /**
   * UserAddress: findFirstOrThrow
   */
  export type UserAddressFindFirstOrThrowArgs = UserAddressFindFirstArgsBase
      

  /**
   * UserAddress without action
   */
  export type UserAddressArgs = {
    /**
     * Select specific fields to fetch from the UserAddress
     * 
    **/
    select?: UserAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAddressInclude | null
  }



  /**
   * Model Class
   */


  export type AggregateClass = {
    _count: ClassCountAggregateOutputType | null
    _avg: ClassAvgAggregateOutputType | null
    _sum: ClassSumAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  export type ClassAvgAggregateOutputType = {
    numOfStudents: number | null
  }

  export type ClassSumAggregateOutputType = {
    numOfStudents: number | null
  }

  export type ClassMinAggregateOutputType = {
    id: string | null
    classType: string | null
    numOfStudents: number | null
    teacher: Role | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClassMaxAggregateOutputType = {
    id: string | null
    classType: string | null
    numOfStudents: number | null
    teacher: Role | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClassCountAggregateOutputType = {
    id: number
    classType: number
    numOfStudents: number
    teacher: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ClassAvgAggregateInputType = {
    numOfStudents?: true
  }

  export type ClassSumAggregateInputType = {
    numOfStudents?: true
  }

  export type ClassMinAggregateInputType = {
    id?: true
    classType?: true
    numOfStudents?: true
    teacher?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClassMaxAggregateInputType = {
    id?: true
    classType?: true
    numOfStudents?: true
    teacher?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClassCountAggregateInputType = {
    id?: true
    classType?: true
    numOfStudents?: true
    teacher?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ClassAggregateArgs = {
    /**
     * Filter which Class to aggregate.
     * 
    **/
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     * 
    **/
    orderBy?: Enumerable<ClassOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Classes
    **/
    _count?: true | ClassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClassAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClassSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassMaxAggregateInputType
  }

  export type GetClassAggregateType<T extends ClassAggregateArgs> = {
        [P in keyof T & keyof AggregateClass]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClass[P]>
      : GetScalarType<T[P], AggregateClass[P]>
  }




  export type ClassGroupByArgs = {
    where?: ClassWhereInput
    orderBy?: Enumerable<ClassOrderByWithAggregationInput>
    by: Array<ClassScalarFieldEnum>
    having?: ClassScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassCountAggregateInputType | true
    _avg?: ClassAvgAggregateInputType
    _sum?: ClassSumAggregateInputType
    _min?: ClassMinAggregateInputType
    _max?: ClassMaxAggregateInputType
  }


  export type ClassGroupByOutputType = {
    id: string
    classType: string
    numOfStudents: number
    teacher: Role
    userId: string
    createdAt: Date
    updatedAt: Date
    _count: ClassCountAggregateOutputType | null
    _avg: ClassAvgAggregateOutputType | null
    _sum: ClassSumAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  type GetClassGroupByPayload<T extends ClassGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ClassGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassGroupByOutputType[P]>
            : GetScalarType<T[P], ClassGroupByOutputType[P]>
        }
      >
    >


  export type ClassSelect = {
    id?: boolean
    classType?: boolean
    numOfStudents?: boolean
    teacher?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ClassInclude = {
    user?: boolean | UserArgs
  }

  export type ClassGetPayload<
    S extends boolean | null | undefined | ClassArgs,
    U = keyof S
      > = S extends true
        ? Class
    : S extends undefined
    ? never
    : S extends ClassArgs | ClassFindManyArgs
    ?'include' extends U
    ? Class  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Class ? Class[P] : never
  } 
    : Class
  : Class


  type ClassCountArgs = Merge<
    Omit<ClassFindManyArgs, 'select' | 'include'> & {
      select?: ClassCountAggregateInputType | true
    }
  >

  export interface ClassDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Class that matches the filter.
     * @param {ClassFindUniqueArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClassFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ClassFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Class'> extends True ? CheckSelect<T, Prisma__ClassClient<Class>, Prisma__ClassClient<ClassGetPayload<T>>> : CheckSelect<T, Prisma__ClassClient<Class | null, null>, Prisma__ClassClient<ClassGetPayload<T> | null, null>>

    /**
     * Find the first Class that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClassFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ClassFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Class'> extends True ? CheckSelect<T, Prisma__ClassClient<Class>, Prisma__ClassClient<ClassGetPayload<T>>> : CheckSelect<T, Prisma__ClassClient<Class | null, null>, Prisma__ClassClient<ClassGetPayload<T> | null, null>>

    /**
     * Find zero or more Classes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Classes
     * const classes = await prisma.class.findMany()
     * 
     * // Get first 10 Classes
     * const classes = await prisma.class.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classWithIdOnly = await prisma.class.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ClassFindManyArgs>(
      args?: SelectSubset<T, ClassFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Class>>, PrismaPromise<Array<ClassGetPayload<T>>>>

    /**
     * Create a Class.
     * @param {ClassCreateArgs} args - Arguments to create a Class.
     * @example
     * // Create one Class
     * const Class = await prisma.class.create({
     *   data: {
     *     // ... data to create a Class
     *   }
     * })
     * 
    **/
    create<T extends ClassCreateArgs>(
      args: SelectSubset<T, ClassCreateArgs>
    ): CheckSelect<T, Prisma__ClassClient<Class>, Prisma__ClassClient<ClassGetPayload<T>>>

    /**
     * Create many Classes.
     *     @param {ClassCreateManyArgs} args - Arguments to create many Classes.
     *     @example
     *     // Create many Classes
     *     const class = await prisma.class.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClassCreateManyArgs>(
      args?: SelectSubset<T, ClassCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Class.
     * @param {ClassDeleteArgs} args - Arguments to delete one Class.
     * @example
     * // Delete one Class
     * const Class = await prisma.class.delete({
     *   where: {
     *     // ... filter to delete one Class
     *   }
     * })
     * 
    **/
    delete<T extends ClassDeleteArgs>(
      args: SelectSubset<T, ClassDeleteArgs>
    ): CheckSelect<T, Prisma__ClassClient<Class>, Prisma__ClassClient<ClassGetPayload<T>>>

    /**
     * Update one Class.
     * @param {ClassUpdateArgs} args - Arguments to update one Class.
     * @example
     * // Update one Class
     * const class = await prisma.class.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClassUpdateArgs>(
      args: SelectSubset<T, ClassUpdateArgs>
    ): CheckSelect<T, Prisma__ClassClient<Class>, Prisma__ClassClient<ClassGetPayload<T>>>

    /**
     * Delete zero or more Classes.
     * @param {ClassDeleteManyArgs} args - Arguments to filter Classes to delete.
     * @example
     * // Delete a few Classes
     * const { count } = await prisma.class.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClassDeleteManyArgs>(
      args?: SelectSubset<T, ClassDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Classes
     * const class = await prisma.class.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClassUpdateManyArgs>(
      args: SelectSubset<T, ClassUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Class.
     * @param {ClassUpsertArgs} args - Arguments to update or create a Class.
     * @example
     * // Update or create a Class
     * const class = await prisma.class.upsert({
     *   create: {
     *     // ... data to create a Class
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Class we want to update
     *   }
     * })
    **/
    upsert<T extends ClassUpsertArgs>(
      args: SelectSubset<T, ClassUpsertArgs>
    ): CheckSelect<T, Prisma__ClassClient<Class>, Prisma__ClassClient<ClassGetPayload<T>>>

    /**
     * Find one Class that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ClassFindUniqueOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClassFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ClassFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__ClassClient<Class>, Prisma__ClassClient<ClassGetPayload<T>>>

    /**
     * Find the first Class that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClassFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ClassFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__ClassClient<Class>, Prisma__ClassClient<ClassGetPayload<T>>>

    /**
     * Count the number of Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassCountArgs} args - Arguments to filter Classes to count.
     * @example
     * // Count the number of Classes
     * const count = await prisma.class.count({
     *   where: {
     *     // ... the filter for the Classes we want to count
     *   }
     * })
    **/
    count<T extends ClassCountArgs>(
      args?: Subset<T, ClassCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassAggregateArgs>(args: Subset<T, ClassAggregateArgs>): PrismaPromise<GetClassAggregateType<T>>

    /**
     * Group by Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClassGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClassGroupByArgs['orderBy'] }
        : { orderBy?: ClassGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClassGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Class.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ClassClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | Null>, Prisma__UserClient<UserGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Class base type for findUnique actions
   */
  export type ClassFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Class
     * 
    **/
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClassInclude | null
    /**
     * Filter, which Class to fetch.
     * 
    **/
    where: ClassWhereUniqueInput
  }

  /**
   * Class: findUnique
   */
  export interface ClassFindUniqueArgs extends ClassFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Class base type for findFirst actions
   */
  export type ClassFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Class
     * 
    **/
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClassInclude | null
    /**
     * Filter, which Class to fetch.
     * 
    **/
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     * 
    **/
    orderBy?: Enumerable<ClassOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     * 
    **/
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     * 
    **/
    distinct?: Enumerable<ClassScalarFieldEnum>
  }

  /**
   * Class: findFirst
   */
  export interface ClassFindFirstArgs extends ClassFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Class findMany
   */
  export type ClassFindManyArgs = {
    /**
     * Select specific fields to fetch from the Class
     * 
    **/
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClassInclude | null
    /**
     * Filter, which Classes to fetch.
     * 
    **/
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     * 
    **/
    orderBy?: Enumerable<ClassOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Classes.
     * 
    **/
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ClassScalarFieldEnum>
  }


  /**
   * Class create
   */
  export type ClassCreateArgs = {
    /**
     * Select specific fields to fetch from the Class
     * 
    **/
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClassInclude | null
    /**
     * The data needed to create a Class.
     * 
    **/
    data: XOR<ClassCreateInput, ClassUncheckedCreateInput>
  }


  /**
   * Class createMany
   */
  export type ClassCreateManyArgs = {
    /**
     * The data used to create many Classes.
     * 
    **/
    data: Enumerable<ClassCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Class update
   */
  export type ClassUpdateArgs = {
    /**
     * Select specific fields to fetch from the Class
     * 
    **/
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClassInclude | null
    /**
     * The data needed to update a Class.
     * 
    **/
    data: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
    /**
     * Choose, which Class to update.
     * 
    **/
    where: ClassWhereUniqueInput
  }


  /**
   * Class updateMany
   */
  export type ClassUpdateManyArgs = {
    /**
     * The data used to update Classes.
     * 
    **/
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyInput>
    /**
     * Filter which Classes to update
     * 
    **/
    where?: ClassWhereInput
  }


  /**
   * Class upsert
   */
  export type ClassUpsertArgs = {
    /**
     * Select specific fields to fetch from the Class
     * 
    **/
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClassInclude | null
    /**
     * The filter to search for the Class to update in case it exists.
     * 
    **/
    where: ClassWhereUniqueInput
    /**
     * In case the Class found by the `where` argument doesn't exist, create a new Class with this data.
     * 
    **/
    create: XOR<ClassCreateInput, ClassUncheckedCreateInput>
    /**
     * In case the Class was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
  }


  /**
   * Class delete
   */
  export type ClassDeleteArgs = {
    /**
     * Select specific fields to fetch from the Class
     * 
    **/
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClassInclude | null
    /**
     * Filter which Class to delete.
     * 
    **/
    where: ClassWhereUniqueInput
  }


  /**
   * Class deleteMany
   */
  export type ClassDeleteManyArgs = {
    /**
     * Filter which Classes to delete
     * 
    **/
    where?: ClassWhereInput
  }


  /**
   * Class: findUniqueOrThrow
   */
  export type ClassFindUniqueOrThrowArgs = ClassFindUniqueArgsBase
      

  /**
   * Class: findFirstOrThrow
   */
  export type ClassFindFirstOrThrowArgs = ClassFindFirstArgsBase
      

  /**
   * Class without action
   */
  export type ClassArgs = {
    /**
     * Select specific fields to fetch from the Class
     * 
    **/
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClassInclude | null
  }



  /**
   * Model School
   */


  export type AggregateSchool = {
    _count: SchoolCountAggregateOutputType | null
    _avg: SchoolAvgAggregateOutputType | null
    _sum: SchoolSumAggregateOutputType | null
    _min: SchoolMinAggregateOutputType | null
    _max: SchoolMaxAggregateOutputType | null
  }

  export type SchoolAvgAggregateOutputType = {
    NumOfStudents: number | null
    NumOfTeachers: number | null
    NumOfNonTeachingStaff: number | null
  }

  export type SchoolSumAggregateOutputType = {
    NumOfStudents: number | null
    NumOfTeachers: number | null
    NumOfNonTeachingStaff: number | null
  }

  export type SchoolMinAggregateOutputType = {
    id: string | null
    schoolName: string | null
    email: string | null
    password: string | null
    dateOfestablishment: string | null
    NumOfStudents: number | null
    NumOfTeachers: number | null
    NumOfNonTeachingStaff: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SchoolMaxAggregateOutputType = {
    id: string | null
    schoolName: string | null
    email: string | null
    password: string | null
    dateOfestablishment: string | null
    NumOfStudents: number | null
    NumOfTeachers: number | null
    NumOfNonTeachingStaff: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SchoolCountAggregateOutputType = {
    id: number
    schoolName: number
    email: number
    password: number
    dateOfestablishment: number
    NumOfStudents: number
    NumOfTeachers: number
    NumOfNonTeachingStaff: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SchoolAvgAggregateInputType = {
    NumOfStudents?: true
    NumOfTeachers?: true
    NumOfNonTeachingStaff?: true
  }

  export type SchoolSumAggregateInputType = {
    NumOfStudents?: true
    NumOfTeachers?: true
    NumOfNonTeachingStaff?: true
  }

  export type SchoolMinAggregateInputType = {
    id?: true
    schoolName?: true
    email?: true
    password?: true
    dateOfestablishment?: true
    NumOfStudents?: true
    NumOfTeachers?: true
    NumOfNonTeachingStaff?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SchoolMaxAggregateInputType = {
    id?: true
    schoolName?: true
    email?: true
    password?: true
    dateOfestablishment?: true
    NumOfStudents?: true
    NumOfTeachers?: true
    NumOfNonTeachingStaff?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SchoolCountAggregateInputType = {
    id?: true
    schoolName?: true
    email?: true
    password?: true
    dateOfestablishment?: true
    NumOfStudents?: true
    NumOfTeachers?: true
    NumOfNonTeachingStaff?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SchoolAggregateArgs = {
    /**
     * Filter which School to aggregate.
     * 
    **/
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     * 
    **/
    orderBy?: Enumerable<SchoolOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Schools
    **/
    _count?: true | SchoolCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SchoolAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SchoolSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SchoolMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SchoolMaxAggregateInputType
  }

  export type GetSchoolAggregateType<T extends SchoolAggregateArgs> = {
        [P in keyof T & keyof AggregateSchool]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchool[P]>
      : GetScalarType<T[P], AggregateSchool[P]>
  }




  export type SchoolGroupByArgs = {
    where?: SchoolWhereInput
    orderBy?: Enumerable<SchoolOrderByWithAggregationInput>
    by: Array<SchoolScalarFieldEnum>
    having?: SchoolScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SchoolCountAggregateInputType | true
    _avg?: SchoolAvgAggregateInputType
    _sum?: SchoolSumAggregateInputType
    _min?: SchoolMinAggregateInputType
    _max?: SchoolMaxAggregateInputType
  }


  export type SchoolGroupByOutputType = {
    id: string
    schoolName: string
    email: string
    password: string
    dateOfestablishment: string | null
    NumOfStudents: number | null
    NumOfTeachers: number | null
    NumOfNonTeachingStaff: number | null
    createdAt: Date
    updatedAt: Date
    _count: SchoolCountAggregateOutputType | null
    _avg: SchoolAvgAggregateOutputType | null
    _sum: SchoolSumAggregateOutputType | null
    _min: SchoolMinAggregateOutputType | null
    _max: SchoolMaxAggregateOutputType | null
  }

  type GetSchoolGroupByPayload<T extends SchoolGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SchoolGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SchoolGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SchoolGroupByOutputType[P]>
            : GetScalarType<T[P], SchoolGroupByOutputType[P]>
        }
      >
    >


  export type SchoolSelect = {
    id?: boolean
    schoolName?: boolean
    email?: boolean
    password?: boolean
    dateOfestablishment?: boolean
    address?: boolean | SchoolAddressFindManyArgs
    NumOfStudents?: boolean
    NumOfTeachers?: boolean
    NumOfNonTeachingStaff?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | SchoolCountOutputTypeArgs
  }

  export type SchoolInclude = {
    address?: boolean | SchoolAddressFindManyArgs
    _count?: boolean | SchoolCountOutputTypeArgs
  }

  export type SchoolGetPayload<
    S extends boolean | null | undefined | SchoolArgs,
    U = keyof S
      > = S extends true
        ? School
    : S extends undefined
    ? never
    : S extends SchoolArgs | SchoolFindManyArgs
    ?'include' extends U
    ? School  & {
    [P in TrueKeys<S['include']>]:
        P extends 'address' ? Array < SchoolAddressGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? SchoolCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'address' ? Array < SchoolAddressGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? SchoolCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof School ? School[P] : never
  } 
    : School
  : School


  type SchoolCountArgs = Merge<
    Omit<SchoolFindManyArgs, 'select' | 'include'> & {
      select?: SchoolCountAggregateInputType | true
    }
  >

  export interface SchoolDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one School that matches the filter.
     * @param {SchoolFindUniqueArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SchoolFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SchoolFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'School'> extends True ? CheckSelect<T, Prisma__SchoolClient<School>, Prisma__SchoolClient<SchoolGetPayload<T>>> : CheckSelect<T, Prisma__SchoolClient<School | null, null>, Prisma__SchoolClient<SchoolGetPayload<T> | null, null>>

    /**
     * Find the first School that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFindFirstArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SchoolFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SchoolFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'School'> extends True ? CheckSelect<T, Prisma__SchoolClient<School>, Prisma__SchoolClient<SchoolGetPayload<T>>> : CheckSelect<T, Prisma__SchoolClient<School | null, null>, Prisma__SchoolClient<SchoolGetPayload<T> | null, null>>

    /**
     * Find zero or more Schools that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Schools
     * const schools = await prisma.school.findMany()
     * 
     * // Get first 10 Schools
     * const schools = await prisma.school.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const schoolWithIdOnly = await prisma.school.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SchoolFindManyArgs>(
      args?: SelectSubset<T, SchoolFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<School>>, PrismaPromise<Array<SchoolGetPayload<T>>>>

    /**
     * Create a School.
     * @param {SchoolCreateArgs} args - Arguments to create a School.
     * @example
     * // Create one School
     * const School = await prisma.school.create({
     *   data: {
     *     // ... data to create a School
     *   }
     * })
     * 
    **/
    create<T extends SchoolCreateArgs>(
      args: SelectSubset<T, SchoolCreateArgs>
    ): CheckSelect<T, Prisma__SchoolClient<School>, Prisma__SchoolClient<SchoolGetPayload<T>>>

    /**
     * Create many Schools.
     *     @param {SchoolCreateManyArgs} args - Arguments to create many Schools.
     *     @example
     *     // Create many Schools
     *     const school = await prisma.school.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SchoolCreateManyArgs>(
      args?: SelectSubset<T, SchoolCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a School.
     * @param {SchoolDeleteArgs} args - Arguments to delete one School.
     * @example
     * // Delete one School
     * const School = await prisma.school.delete({
     *   where: {
     *     // ... filter to delete one School
     *   }
     * })
     * 
    **/
    delete<T extends SchoolDeleteArgs>(
      args: SelectSubset<T, SchoolDeleteArgs>
    ): CheckSelect<T, Prisma__SchoolClient<School>, Prisma__SchoolClient<SchoolGetPayload<T>>>

    /**
     * Update one School.
     * @param {SchoolUpdateArgs} args - Arguments to update one School.
     * @example
     * // Update one School
     * const school = await prisma.school.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SchoolUpdateArgs>(
      args: SelectSubset<T, SchoolUpdateArgs>
    ): CheckSelect<T, Prisma__SchoolClient<School>, Prisma__SchoolClient<SchoolGetPayload<T>>>

    /**
     * Delete zero or more Schools.
     * @param {SchoolDeleteManyArgs} args - Arguments to filter Schools to delete.
     * @example
     * // Delete a few Schools
     * const { count } = await prisma.school.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SchoolDeleteManyArgs>(
      args?: SelectSubset<T, SchoolDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Schools
     * const school = await prisma.school.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SchoolUpdateManyArgs>(
      args: SelectSubset<T, SchoolUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one School.
     * @param {SchoolUpsertArgs} args - Arguments to update or create a School.
     * @example
     * // Update or create a School
     * const school = await prisma.school.upsert({
     *   create: {
     *     // ... data to create a School
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the School we want to update
     *   }
     * })
    **/
    upsert<T extends SchoolUpsertArgs>(
      args: SelectSubset<T, SchoolUpsertArgs>
    ): CheckSelect<T, Prisma__SchoolClient<School>, Prisma__SchoolClient<SchoolGetPayload<T>>>

    /**
     * Find one School that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {SchoolFindUniqueOrThrowArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SchoolFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SchoolFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__SchoolClient<School>, Prisma__SchoolClient<SchoolGetPayload<T>>>

    /**
     * Find the first School that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFindFirstOrThrowArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SchoolFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SchoolFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__SchoolClient<School>, Prisma__SchoolClient<SchoolGetPayload<T>>>

    /**
     * Count the number of Schools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolCountArgs} args - Arguments to filter Schools to count.
     * @example
     * // Count the number of Schools
     * const count = await prisma.school.count({
     *   where: {
     *     // ... the filter for the Schools we want to count
     *   }
     * })
    **/
    count<T extends SchoolCountArgs>(
      args?: Subset<T, SchoolCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SchoolCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a School.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SchoolAggregateArgs>(args: Subset<T, SchoolAggregateArgs>): PrismaPromise<GetSchoolAggregateType<T>>

    /**
     * Group by School.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SchoolGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SchoolGroupByArgs['orderBy'] }
        : { orderBy?: SchoolGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SchoolGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSchoolGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for School.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SchoolClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    address<T extends SchoolAddressFindManyArgs = {}>(args?: Subset<T, SchoolAddressFindManyArgs>): CheckSelect<T, PrismaPromise<Array<SchoolAddress>| Null>, PrismaPromise<Array<SchoolAddressGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * School base type for findUnique actions
   */
  export type SchoolFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the School
     * 
    **/
    select?: SchoolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SchoolInclude | null
    /**
     * Filter, which School to fetch.
     * 
    **/
    where: SchoolWhereUniqueInput
  }

  /**
   * School: findUnique
   */
  export interface SchoolFindUniqueArgs extends SchoolFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * School base type for findFirst actions
   */
  export type SchoolFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the School
     * 
    **/
    select?: SchoolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SchoolInclude | null
    /**
     * Filter, which School to fetch.
     * 
    **/
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     * 
    **/
    orderBy?: Enumerable<SchoolOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schools.
     * 
    **/
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schools.
     * 
    **/
    distinct?: Enumerable<SchoolScalarFieldEnum>
  }

  /**
   * School: findFirst
   */
  export interface SchoolFindFirstArgs extends SchoolFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * School findMany
   */
  export type SchoolFindManyArgs = {
    /**
     * Select specific fields to fetch from the School
     * 
    **/
    select?: SchoolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SchoolInclude | null
    /**
     * Filter, which Schools to fetch.
     * 
    **/
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     * 
    **/
    orderBy?: Enumerable<SchoolOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Schools.
     * 
    **/
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SchoolScalarFieldEnum>
  }


  /**
   * School create
   */
  export type SchoolCreateArgs = {
    /**
     * Select specific fields to fetch from the School
     * 
    **/
    select?: SchoolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SchoolInclude | null
    /**
     * The data needed to create a School.
     * 
    **/
    data: XOR<SchoolCreateInput, SchoolUncheckedCreateInput>
  }


  /**
   * School createMany
   */
  export type SchoolCreateManyArgs = {
    /**
     * The data used to create many Schools.
     * 
    **/
    data: Enumerable<SchoolCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * School update
   */
  export type SchoolUpdateArgs = {
    /**
     * Select specific fields to fetch from the School
     * 
    **/
    select?: SchoolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SchoolInclude | null
    /**
     * The data needed to update a School.
     * 
    **/
    data: XOR<SchoolUpdateInput, SchoolUncheckedUpdateInput>
    /**
     * Choose, which School to update.
     * 
    **/
    where: SchoolWhereUniqueInput
  }


  /**
   * School updateMany
   */
  export type SchoolUpdateManyArgs = {
    /**
     * The data used to update Schools.
     * 
    **/
    data: XOR<SchoolUpdateManyMutationInput, SchoolUncheckedUpdateManyInput>
    /**
     * Filter which Schools to update
     * 
    **/
    where?: SchoolWhereInput
  }


  /**
   * School upsert
   */
  export type SchoolUpsertArgs = {
    /**
     * Select specific fields to fetch from the School
     * 
    **/
    select?: SchoolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SchoolInclude | null
    /**
     * The filter to search for the School to update in case it exists.
     * 
    **/
    where: SchoolWhereUniqueInput
    /**
     * In case the School found by the `where` argument doesn't exist, create a new School with this data.
     * 
    **/
    create: XOR<SchoolCreateInput, SchoolUncheckedCreateInput>
    /**
     * In case the School was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SchoolUpdateInput, SchoolUncheckedUpdateInput>
  }


  /**
   * School delete
   */
  export type SchoolDeleteArgs = {
    /**
     * Select specific fields to fetch from the School
     * 
    **/
    select?: SchoolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SchoolInclude | null
    /**
     * Filter which School to delete.
     * 
    **/
    where: SchoolWhereUniqueInput
  }


  /**
   * School deleteMany
   */
  export type SchoolDeleteManyArgs = {
    /**
     * Filter which Schools to delete
     * 
    **/
    where?: SchoolWhereInput
  }


  /**
   * School: findUniqueOrThrow
   */
  export type SchoolFindUniqueOrThrowArgs = SchoolFindUniqueArgsBase
      

  /**
   * School: findFirstOrThrow
   */
  export type SchoolFindFirstOrThrowArgs = SchoolFindFirstArgsBase
      

  /**
   * School without action
   */
  export type SchoolArgs = {
    /**
     * Select specific fields to fetch from the School
     * 
    **/
    select?: SchoolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SchoolInclude | null
  }



  /**
   * Model SchoolAddress
   */


  export type AggregateSchoolAddress = {
    _count: SchoolAddressCountAggregateOutputType | null
    _min: SchoolAddressMinAggregateOutputType | null
    _max: SchoolAddressMaxAggregateOutputType | null
  }

  export type SchoolAddressMinAggregateOutputType = {
    id: string | null
    schoolId: string | null
    POBox: string | null
    email: string | null
    website: string | null
    GPS: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SchoolAddressMaxAggregateOutputType = {
    id: string | null
    schoolId: string | null
    POBox: string | null
    email: string | null
    website: string | null
    GPS: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SchoolAddressCountAggregateOutputType = {
    id: number
    schoolId: number
    location: number
    POBox: number
    email: number
    website: number
    GPS: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SchoolAddressMinAggregateInputType = {
    id?: true
    schoolId?: true
    POBox?: true
    email?: true
    website?: true
    GPS?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SchoolAddressMaxAggregateInputType = {
    id?: true
    schoolId?: true
    POBox?: true
    email?: true
    website?: true
    GPS?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SchoolAddressCountAggregateInputType = {
    id?: true
    schoolId?: true
    location?: true
    POBox?: true
    email?: true
    website?: true
    GPS?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SchoolAddressAggregateArgs = {
    /**
     * Filter which SchoolAddress to aggregate.
     * 
    **/
    where?: SchoolAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchoolAddresses to fetch.
     * 
    **/
    orderBy?: Enumerable<SchoolAddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SchoolAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchoolAddresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchoolAddresses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SchoolAddresses
    **/
    _count?: true | SchoolAddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SchoolAddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SchoolAddressMaxAggregateInputType
  }

  export type GetSchoolAddressAggregateType<T extends SchoolAddressAggregateArgs> = {
        [P in keyof T & keyof AggregateSchoolAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchoolAddress[P]>
      : GetScalarType<T[P], AggregateSchoolAddress[P]>
  }




  export type SchoolAddressGroupByArgs = {
    where?: SchoolAddressWhereInput
    orderBy?: Enumerable<SchoolAddressOrderByWithAggregationInput>
    by: Array<SchoolAddressScalarFieldEnum>
    having?: SchoolAddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SchoolAddressCountAggregateInputType | true
    _min?: SchoolAddressMinAggregateInputType
    _max?: SchoolAddressMaxAggregateInputType
  }


  export type SchoolAddressGroupByOutputType = {
    id: string
    schoolId: string
    location: string[]
    POBox: string
    email: string
    website: string | null
    GPS: string
    createdAt: Date
    updatedAt: Date
    _count: SchoolAddressCountAggregateOutputType | null
    _min: SchoolAddressMinAggregateOutputType | null
    _max: SchoolAddressMaxAggregateOutputType | null
  }

  type GetSchoolAddressGroupByPayload<T extends SchoolAddressGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SchoolAddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SchoolAddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SchoolAddressGroupByOutputType[P]>
            : GetScalarType<T[P], SchoolAddressGroupByOutputType[P]>
        }
      >
    >


  export type SchoolAddressSelect = {
    id?: boolean
    school?: boolean | SchoolArgs
    schoolId?: boolean
    location?: boolean
    POBox?: boolean
    email?: boolean
    website?: boolean
    GPS?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SchoolAddressInclude = {
    school?: boolean | SchoolArgs
  }

  export type SchoolAddressGetPayload<
    S extends boolean | null | undefined | SchoolAddressArgs,
    U = keyof S
      > = S extends true
        ? SchoolAddress
    : S extends undefined
    ? never
    : S extends SchoolAddressArgs | SchoolAddressFindManyArgs
    ?'include' extends U
    ? SchoolAddress  & {
    [P in TrueKeys<S['include']>]:
        P extends 'school' ? SchoolGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'school' ? SchoolGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof SchoolAddress ? SchoolAddress[P] : never
  } 
    : SchoolAddress
  : SchoolAddress


  type SchoolAddressCountArgs = Merge<
    Omit<SchoolAddressFindManyArgs, 'select' | 'include'> & {
      select?: SchoolAddressCountAggregateInputType | true
    }
  >

  export interface SchoolAddressDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one SchoolAddress that matches the filter.
     * @param {SchoolAddressFindUniqueArgs} args - Arguments to find a SchoolAddress
     * @example
     * // Get one SchoolAddress
     * const schoolAddress = await prisma.schoolAddress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SchoolAddressFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SchoolAddressFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SchoolAddress'> extends True ? CheckSelect<T, Prisma__SchoolAddressClient<SchoolAddress>, Prisma__SchoolAddressClient<SchoolAddressGetPayload<T>>> : CheckSelect<T, Prisma__SchoolAddressClient<SchoolAddress | null, null>, Prisma__SchoolAddressClient<SchoolAddressGetPayload<T> | null, null>>

    /**
     * Find the first SchoolAddress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolAddressFindFirstArgs} args - Arguments to find a SchoolAddress
     * @example
     * // Get one SchoolAddress
     * const schoolAddress = await prisma.schoolAddress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SchoolAddressFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SchoolAddressFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SchoolAddress'> extends True ? CheckSelect<T, Prisma__SchoolAddressClient<SchoolAddress>, Prisma__SchoolAddressClient<SchoolAddressGetPayload<T>>> : CheckSelect<T, Prisma__SchoolAddressClient<SchoolAddress | null, null>, Prisma__SchoolAddressClient<SchoolAddressGetPayload<T> | null, null>>

    /**
     * Find zero or more SchoolAddresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolAddressFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SchoolAddresses
     * const schoolAddresses = await prisma.schoolAddress.findMany()
     * 
     * // Get first 10 SchoolAddresses
     * const schoolAddresses = await prisma.schoolAddress.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const schoolAddressWithIdOnly = await prisma.schoolAddress.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SchoolAddressFindManyArgs>(
      args?: SelectSubset<T, SchoolAddressFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<SchoolAddress>>, PrismaPromise<Array<SchoolAddressGetPayload<T>>>>

    /**
     * Create a SchoolAddress.
     * @param {SchoolAddressCreateArgs} args - Arguments to create a SchoolAddress.
     * @example
     * // Create one SchoolAddress
     * const SchoolAddress = await prisma.schoolAddress.create({
     *   data: {
     *     // ... data to create a SchoolAddress
     *   }
     * })
     * 
    **/
    create<T extends SchoolAddressCreateArgs>(
      args: SelectSubset<T, SchoolAddressCreateArgs>
    ): CheckSelect<T, Prisma__SchoolAddressClient<SchoolAddress>, Prisma__SchoolAddressClient<SchoolAddressGetPayload<T>>>

    /**
     * Create many SchoolAddresses.
     *     @param {SchoolAddressCreateManyArgs} args - Arguments to create many SchoolAddresses.
     *     @example
     *     // Create many SchoolAddresses
     *     const schoolAddress = await prisma.schoolAddress.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SchoolAddressCreateManyArgs>(
      args?: SelectSubset<T, SchoolAddressCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a SchoolAddress.
     * @param {SchoolAddressDeleteArgs} args - Arguments to delete one SchoolAddress.
     * @example
     * // Delete one SchoolAddress
     * const SchoolAddress = await prisma.schoolAddress.delete({
     *   where: {
     *     // ... filter to delete one SchoolAddress
     *   }
     * })
     * 
    **/
    delete<T extends SchoolAddressDeleteArgs>(
      args: SelectSubset<T, SchoolAddressDeleteArgs>
    ): CheckSelect<T, Prisma__SchoolAddressClient<SchoolAddress>, Prisma__SchoolAddressClient<SchoolAddressGetPayload<T>>>

    /**
     * Update one SchoolAddress.
     * @param {SchoolAddressUpdateArgs} args - Arguments to update one SchoolAddress.
     * @example
     * // Update one SchoolAddress
     * const schoolAddress = await prisma.schoolAddress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SchoolAddressUpdateArgs>(
      args: SelectSubset<T, SchoolAddressUpdateArgs>
    ): CheckSelect<T, Prisma__SchoolAddressClient<SchoolAddress>, Prisma__SchoolAddressClient<SchoolAddressGetPayload<T>>>

    /**
     * Delete zero or more SchoolAddresses.
     * @param {SchoolAddressDeleteManyArgs} args - Arguments to filter SchoolAddresses to delete.
     * @example
     * // Delete a few SchoolAddresses
     * const { count } = await prisma.schoolAddress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SchoolAddressDeleteManyArgs>(
      args?: SelectSubset<T, SchoolAddressDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more SchoolAddresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolAddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SchoolAddresses
     * const schoolAddress = await prisma.schoolAddress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SchoolAddressUpdateManyArgs>(
      args: SelectSubset<T, SchoolAddressUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one SchoolAddress.
     * @param {SchoolAddressUpsertArgs} args - Arguments to update or create a SchoolAddress.
     * @example
     * // Update or create a SchoolAddress
     * const schoolAddress = await prisma.schoolAddress.upsert({
     *   create: {
     *     // ... data to create a SchoolAddress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SchoolAddress we want to update
     *   }
     * })
    **/
    upsert<T extends SchoolAddressUpsertArgs>(
      args: SelectSubset<T, SchoolAddressUpsertArgs>
    ): CheckSelect<T, Prisma__SchoolAddressClient<SchoolAddress>, Prisma__SchoolAddressClient<SchoolAddressGetPayload<T>>>

    /**
     * Find one SchoolAddress that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {SchoolAddressFindUniqueOrThrowArgs} args - Arguments to find a SchoolAddress
     * @example
     * // Get one SchoolAddress
     * const schoolAddress = await prisma.schoolAddress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SchoolAddressFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SchoolAddressFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__SchoolAddressClient<SchoolAddress>, Prisma__SchoolAddressClient<SchoolAddressGetPayload<T>>>

    /**
     * Find the first SchoolAddress that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolAddressFindFirstOrThrowArgs} args - Arguments to find a SchoolAddress
     * @example
     * // Get one SchoolAddress
     * const schoolAddress = await prisma.schoolAddress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SchoolAddressFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SchoolAddressFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__SchoolAddressClient<SchoolAddress>, Prisma__SchoolAddressClient<SchoolAddressGetPayload<T>>>

    /**
     * Count the number of SchoolAddresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolAddressCountArgs} args - Arguments to filter SchoolAddresses to count.
     * @example
     * // Count the number of SchoolAddresses
     * const count = await prisma.schoolAddress.count({
     *   where: {
     *     // ... the filter for the SchoolAddresses we want to count
     *   }
     * })
    **/
    count<T extends SchoolAddressCountArgs>(
      args?: Subset<T, SchoolAddressCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SchoolAddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SchoolAddress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolAddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SchoolAddressAggregateArgs>(args: Subset<T, SchoolAddressAggregateArgs>): PrismaPromise<GetSchoolAddressAggregateType<T>>

    /**
     * Group by SchoolAddress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolAddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SchoolAddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SchoolAddressGroupByArgs['orderBy'] }
        : { orderBy?: SchoolAddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SchoolAddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSchoolAddressGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for SchoolAddress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SchoolAddressClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    school<T extends SchoolArgs = {}>(args?: Subset<T, SchoolArgs>): CheckSelect<T, Prisma__SchoolClient<School | Null>, Prisma__SchoolClient<SchoolGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * SchoolAddress base type for findUnique actions
   */
  export type SchoolAddressFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the SchoolAddress
     * 
    **/
    select?: SchoolAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SchoolAddressInclude | null
    /**
     * Filter, which SchoolAddress to fetch.
     * 
    **/
    where: SchoolAddressWhereUniqueInput
  }

  /**
   * SchoolAddress: findUnique
   */
  export interface SchoolAddressFindUniqueArgs extends SchoolAddressFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SchoolAddress base type for findFirst actions
   */
  export type SchoolAddressFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the SchoolAddress
     * 
    **/
    select?: SchoolAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SchoolAddressInclude | null
    /**
     * Filter, which SchoolAddress to fetch.
     * 
    **/
    where?: SchoolAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchoolAddresses to fetch.
     * 
    **/
    orderBy?: Enumerable<SchoolAddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SchoolAddresses.
     * 
    **/
    cursor?: SchoolAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchoolAddresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchoolAddresses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SchoolAddresses.
     * 
    **/
    distinct?: Enumerable<SchoolAddressScalarFieldEnum>
  }

  /**
   * SchoolAddress: findFirst
   */
  export interface SchoolAddressFindFirstArgs extends SchoolAddressFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SchoolAddress findMany
   */
  export type SchoolAddressFindManyArgs = {
    /**
     * Select specific fields to fetch from the SchoolAddress
     * 
    **/
    select?: SchoolAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SchoolAddressInclude | null
    /**
     * Filter, which SchoolAddresses to fetch.
     * 
    **/
    where?: SchoolAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchoolAddresses to fetch.
     * 
    **/
    orderBy?: Enumerable<SchoolAddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SchoolAddresses.
     * 
    **/
    cursor?: SchoolAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchoolAddresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchoolAddresses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SchoolAddressScalarFieldEnum>
  }


  /**
   * SchoolAddress create
   */
  export type SchoolAddressCreateArgs = {
    /**
     * Select specific fields to fetch from the SchoolAddress
     * 
    **/
    select?: SchoolAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SchoolAddressInclude | null
    /**
     * The data needed to create a SchoolAddress.
     * 
    **/
    data: XOR<SchoolAddressCreateInput, SchoolAddressUncheckedCreateInput>
  }


  /**
   * SchoolAddress createMany
   */
  export type SchoolAddressCreateManyArgs = {
    /**
     * The data used to create many SchoolAddresses.
     * 
    **/
    data: Enumerable<SchoolAddressCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * SchoolAddress update
   */
  export type SchoolAddressUpdateArgs = {
    /**
     * Select specific fields to fetch from the SchoolAddress
     * 
    **/
    select?: SchoolAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SchoolAddressInclude | null
    /**
     * The data needed to update a SchoolAddress.
     * 
    **/
    data: XOR<SchoolAddressUpdateInput, SchoolAddressUncheckedUpdateInput>
    /**
     * Choose, which SchoolAddress to update.
     * 
    **/
    where: SchoolAddressWhereUniqueInput
  }


  /**
   * SchoolAddress updateMany
   */
  export type SchoolAddressUpdateManyArgs = {
    /**
     * The data used to update SchoolAddresses.
     * 
    **/
    data: XOR<SchoolAddressUpdateManyMutationInput, SchoolAddressUncheckedUpdateManyInput>
    /**
     * Filter which SchoolAddresses to update
     * 
    **/
    where?: SchoolAddressWhereInput
  }


  /**
   * SchoolAddress upsert
   */
  export type SchoolAddressUpsertArgs = {
    /**
     * Select specific fields to fetch from the SchoolAddress
     * 
    **/
    select?: SchoolAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SchoolAddressInclude | null
    /**
     * The filter to search for the SchoolAddress to update in case it exists.
     * 
    **/
    where: SchoolAddressWhereUniqueInput
    /**
     * In case the SchoolAddress found by the `where` argument doesn't exist, create a new SchoolAddress with this data.
     * 
    **/
    create: XOR<SchoolAddressCreateInput, SchoolAddressUncheckedCreateInput>
    /**
     * In case the SchoolAddress was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SchoolAddressUpdateInput, SchoolAddressUncheckedUpdateInput>
  }


  /**
   * SchoolAddress delete
   */
  export type SchoolAddressDeleteArgs = {
    /**
     * Select specific fields to fetch from the SchoolAddress
     * 
    **/
    select?: SchoolAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SchoolAddressInclude | null
    /**
     * Filter which SchoolAddress to delete.
     * 
    **/
    where: SchoolAddressWhereUniqueInput
  }


  /**
   * SchoolAddress deleteMany
   */
  export type SchoolAddressDeleteManyArgs = {
    /**
     * Filter which SchoolAddresses to delete
     * 
    **/
    where?: SchoolAddressWhereInput
  }


  /**
   * SchoolAddress: findUniqueOrThrow
   */
  export type SchoolAddressFindUniqueOrThrowArgs = SchoolAddressFindUniqueArgsBase
      

  /**
   * SchoolAddress: findFirstOrThrow
   */
  export type SchoolAddressFindFirstOrThrowArgs = SchoolAddressFindFirstArgsBase
      

  /**
   * SchoolAddress without action
   */
  export type SchoolAddressArgs = {
    /**
     * Select specific fields to fetch from the SchoolAddress
     * 
    **/
    select?: SchoolAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SchoolAddressInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ClassScalarFieldEnum: {
    id: 'id',
    classType: 'classType',
    numOfStudents: 'numOfStudents',
    teacher: 'teacher',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ClassScalarFieldEnum = (typeof ClassScalarFieldEnum)[keyof typeof ClassScalarFieldEnum]


  export const GuardianScalarFieldEnum: {
    id: 'id',
    father: 'father',
    mother: 'mother',
    other: 'other',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GuardianScalarFieldEnum = (typeof GuardianScalarFieldEnum)[keyof typeof GuardianScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SchoolAddressScalarFieldEnum: {
    id: 'id',
    schoolId: 'schoolId',
    location: 'location',
    POBox: 'POBox',
    email: 'email',
    website: 'website',
    GPS: 'GPS',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SchoolAddressScalarFieldEnum = (typeof SchoolAddressScalarFieldEnum)[keyof typeof SchoolAddressScalarFieldEnum]


  export const SchoolScalarFieldEnum: {
    id: 'id',
    schoolName: 'schoolName',
    email: 'email',
    password: 'password',
    dateOfestablishment: 'dateOfestablishment',
    NumOfStudents: 'NumOfStudents',
    NumOfTeachers: 'NumOfTeachers',
    NumOfNonTeachingStaff: 'NumOfNonTeachingStaff',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SchoolScalarFieldEnum = (typeof SchoolScalarFieldEnum)[keyof typeof SchoolScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserAddressScalarFieldEnum: {
    id: 'id',
    phoneNumber: 'phoneNumber',
    GPS: 'GPS',
    NearestLandMark: 'NearestLandMark',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserAddressScalarFieldEnum = (typeof UserAddressScalarFieldEnum)[keyof typeof UserAddressScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    firstname: 'firstname',
    email: 'email',
    password: 'password',
    age: 'age',
    role: 'role',
    profilePic: 'profilePic',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    firstname?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    age?: IntNullableFilter | number | null
    role?: EnumRoleFilter | Role
    address?: UserAddressListRelationFilter
    profilePic?: StringNullableFilter | string | null
    guardian?: GuardianListRelationFilter
    class?: ClassListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    firstname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    age?: SortOrder
    role?: SortOrder
    address?: UserAddressOrderByRelationAggregateInput
    profilePic?: SortOrder
    guardian?: GuardianOrderByRelationAggregateInput
    class?: ClassOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    firstname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    age?: SortOrder
    role?: SortOrder
    profilePic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    firstname?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    age?: IntNullableWithAggregatesFilter | number | null
    role?: EnumRoleWithAggregatesFilter | Role
    profilePic?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type GuardianWhereInput = {
    AND?: Enumerable<GuardianWhereInput>
    OR?: Enumerable<GuardianWhereInput>
    NOT?: Enumerable<GuardianWhereInput>
    id?: StringFilter | string
    father?: StringFilter | string
    mother?: StringFilter | string
    other?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type GuardianOrderByWithRelationInput = {
    id?: SortOrder
    father?: SortOrder
    mother?: SortOrder
    other?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GuardianWhereUniqueInput = {
    id?: string
  }

  export type GuardianOrderByWithAggregationInput = {
    id?: SortOrder
    father?: SortOrder
    mother?: SortOrder
    other?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GuardianCountOrderByAggregateInput
    _max?: GuardianMaxOrderByAggregateInput
    _min?: GuardianMinOrderByAggregateInput
  }

  export type GuardianScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GuardianScalarWhereWithAggregatesInput>
    OR?: Enumerable<GuardianScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GuardianScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    father?: StringWithAggregatesFilter | string
    mother?: StringWithAggregatesFilter | string
    other?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserAddressWhereInput = {
    AND?: Enumerable<UserAddressWhereInput>
    OR?: Enumerable<UserAddressWhereInput>
    NOT?: Enumerable<UserAddressWhereInput>
    id?: StringFilter | string
    phoneNumber?: StringFilter | string
    GPS?: StringFilter | string
    NearestLandMark?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserAddressOrderByWithRelationInput = {
    id?: SortOrder
    phoneNumber?: SortOrder
    GPS?: SortOrder
    NearestLandMark?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAddressWhereUniqueInput = {
    id?: string
  }

  export type UserAddressOrderByWithAggregationInput = {
    id?: SortOrder
    phoneNumber?: SortOrder
    GPS?: SortOrder
    NearestLandMark?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserAddressCountOrderByAggregateInput
    _max?: UserAddressMaxOrderByAggregateInput
    _min?: UserAddressMinOrderByAggregateInput
  }

  export type UserAddressScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserAddressScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserAddressScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserAddressScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    phoneNumber?: StringWithAggregatesFilter | string
    GPS?: StringWithAggregatesFilter | string
    NearestLandMark?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ClassWhereInput = {
    AND?: Enumerable<ClassWhereInput>
    OR?: Enumerable<ClassWhereInput>
    NOT?: Enumerable<ClassWhereInput>
    id?: StringFilter | string
    classType?: StringFilter | string
    numOfStudents?: IntFilter | number
    teacher?: EnumRoleFilter | Role
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ClassOrderByWithRelationInput = {
    id?: SortOrder
    classType?: SortOrder
    numOfStudents?: SortOrder
    teacher?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClassWhereUniqueInput = {
    id?: string
  }

  export type ClassOrderByWithAggregationInput = {
    id?: SortOrder
    classType?: SortOrder
    numOfStudents?: SortOrder
    teacher?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ClassCountOrderByAggregateInput
    _avg?: ClassAvgOrderByAggregateInput
    _max?: ClassMaxOrderByAggregateInput
    _min?: ClassMinOrderByAggregateInput
    _sum?: ClassSumOrderByAggregateInput
  }

  export type ClassScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ClassScalarWhereWithAggregatesInput>
    OR?: Enumerable<ClassScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ClassScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    classType?: StringWithAggregatesFilter | string
    numOfStudents?: IntWithAggregatesFilter | number
    teacher?: EnumRoleWithAggregatesFilter | Role
    userId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type SchoolWhereInput = {
    AND?: Enumerable<SchoolWhereInput>
    OR?: Enumerable<SchoolWhereInput>
    NOT?: Enumerable<SchoolWhereInput>
    id?: StringFilter | string
    schoolName?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    dateOfestablishment?: StringNullableFilter | string | null
    address?: SchoolAddressListRelationFilter
    NumOfStudents?: IntNullableFilter | number | null
    NumOfTeachers?: IntNullableFilter | number | null
    NumOfNonTeachingStaff?: IntNullableFilter | number | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type SchoolOrderByWithRelationInput = {
    id?: SortOrder
    schoolName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    dateOfestablishment?: SortOrder
    address?: SchoolAddressOrderByRelationAggregateInput
    NumOfStudents?: SortOrder
    NumOfTeachers?: SortOrder
    NumOfNonTeachingStaff?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SchoolWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type SchoolOrderByWithAggregationInput = {
    id?: SortOrder
    schoolName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    dateOfestablishment?: SortOrder
    NumOfStudents?: SortOrder
    NumOfTeachers?: SortOrder
    NumOfNonTeachingStaff?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SchoolCountOrderByAggregateInput
    _avg?: SchoolAvgOrderByAggregateInput
    _max?: SchoolMaxOrderByAggregateInput
    _min?: SchoolMinOrderByAggregateInput
    _sum?: SchoolSumOrderByAggregateInput
  }

  export type SchoolScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SchoolScalarWhereWithAggregatesInput>
    OR?: Enumerable<SchoolScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SchoolScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    schoolName?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    dateOfestablishment?: StringNullableWithAggregatesFilter | string | null
    NumOfStudents?: IntNullableWithAggregatesFilter | number | null
    NumOfTeachers?: IntNullableWithAggregatesFilter | number | null
    NumOfNonTeachingStaff?: IntNullableWithAggregatesFilter | number | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type SchoolAddressWhereInput = {
    AND?: Enumerable<SchoolAddressWhereInput>
    OR?: Enumerable<SchoolAddressWhereInput>
    NOT?: Enumerable<SchoolAddressWhereInput>
    id?: StringFilter | string
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
    schoolId?: StringFilter | string
    location?: StringNullableListFilter
    POBox?: StringFilter | string
    email?: StringFilter | string
    website?: StringNullableFilter | string | null
    GPS?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type SchoolAddressOrderByWithRelationInput = {
    id?: SortOrder
    school?: SchoolOrderByWithRelationInput
    schoolId?: SortOrder
    location?: SortOrder
    POBox?: SortOrder
    email?: SortOrder
    website?: SortOrder
    GPS?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SchoolAddressWhereUniqueInput = {
    id?: string
  }

  export type SchoolAddressOrderByWithAggregationInput = {
    id?: SortOrder
    schoolId?: SortOrder
    location?: SortOrder
    POBox?: SortOrder
    email?: SortOrder
    website?: SortOrder
    GPS?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SchoolAddressCountOrderByAggregateInput
    _max?: SchoolAddressMaxOrderByAggregateInput
    _min?: SchoolAddressMinOrderByAggregateInput
  }

  export type SchoolAddressScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SchoolAddressScalarWhereWithAggregatesInput>
    OR?: Enumerable<SchoolAddressScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SchoolAddressScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    schoolId?: StringWithAggregatesFilter | string
    location?: StringNullableListFilter
    POBox?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    website?: StringNullableWithAggregatesFilter | string | null
    GPS?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserCreateInput = {
    id?: string
    firstname: string
    email: string
    password: string
    age?: number | null
    role?: Role
    address?: UserAddressCreateNestedManyWithoutUserInput
    profilePic?: string | null
    guardian?: GuardianCreateNestedManyWithoutUserInput
    class?: ClassCreateNestedManyWithoutUserInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateInput = {
    id?: string
    firstname: string
    email: string
    password: string
    age?: number | null
    role?: Role
    address?: UserAddressUncheckedCreateNestedManyWithoutUserInput
    profilePic?: string | null
    guardian?: GuardianUncheckedCreateNestedManyWithoutUserInput
    class?: ClassUncheckedCreateNestedManyWithoutUserInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    address?: UserAddressUpdateManyWithoutUserNestedInput
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    guardian?: GuardianUpdateManyWithoutUserNestedInput
    class?: ClassUpdateManyWithoutUserNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    address?: UserAddressUncheckedUpdateManyWithoutUserNestedInput
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    guardian?: GuardianUncheckedUpdateManyWithoutUserNestedInput
    class?: ClassUncheckedUpdateManyWithoutUserNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInput = {
    id?: string
    firstname: string
    email: string
    password: string
    age?: number | null
    role?: Role
    profilePic?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuardianCreateInput = {
    id?: string
    father: string
    mother: string
    other: string
    user: UserCreateNestedOneWithoutGuardianInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GuardianUncheckedCreateInput = {
    id?: string
    father: string
    mother: string
    other: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GuardianUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    father?: StringFieldUpdateOperationsInput | string
    mother?: StringFieldUpdateOperationsInput | string
    other?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutGuardianNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuardianUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    father?: StringFieldUpdateOperationsInput | string
    mother?: StringFieldUpdateOperationsInput | string
    other?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuardianCreateManyInput = {
    id?: string
    father: string
    mother: string
    other: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GuardianUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    father?: StringFieldUpdateOperationsInput | string
    mother?: StringFieldUpdateOperationsInput | string
    other?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuardianUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    father?: StringFieldUpdateOperationsInput | string
    mother?: StringFieldUpdateOperationsInput | string
    other?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAddressCreateInput = {
    id?: string
    phoneNumber: string
    GPS: string
    NearestLandMark: string
    user: UserCreateNestedOneWithoutAddressInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAddressUncheckedCreateInput = {
    id?: string
    phoneNumber: string
    GPS: string
    NearestLandMark: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAddressUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    GPS?: StringFieldUpdateOperationsInput | string
    NearestLandMark?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutAddressNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAddressUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    GPS?: StringFieldUpdateOperationsInput | string
    NearestLandMark?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAddressCreateManyInput = {
    id?: string
    phoneNumber: string
    GPS: string
    NearestLandMark: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAddressUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    GPS?: StringFieldUpdateOperationsInput | string
    NearestLandMark?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAddressUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    GPS?: StringFieldUpdateOperationsInput | string
    NearestLandMark?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassCreateInput = {
    id?: string
    classType: string
    numOfStudents: number
    teacher: Role
    user: UserCreateNestedOneWithoutClassInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClassUncheckedCreateInput = {
    id?: string
    classType: string
    numOfStudents: number
    teacher: Role
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClassUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    classType?: StringFieldUpdateOperationsInput | string
    numOfStudents?: IntFieldUpdateOperationsInput | number
    teacher?: EnumRoleFieldUpdateOperationsInput | Role
    user?: UserUpdateOneRequiredWithoutClassNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    classType?: StringFieldUpdateOperationsInput | string
    numOfStudents?: IntFieldUpdateOperationsInput | number
    teacher?: EnumRoleFieldUpdateOperationsInput | Role
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassCreateManyInput = {
    id?: string
    classType: string
    numOfStudents: number
    teacher: Role
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClassUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    classType?: StringFieldUpdateOperationsInput | string
    numOfStudents?: IntFieldUpdateOperationsInput | number
    teacher?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    classType?: StringFieldUpdateOperationsInput | string
    numOfStudents?: IntFieldUpdateOperationsInput | number
    teacher?: EnumRoleFieldUpdateOperationsInput | Role
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolCreateInput = {
    id?: string
    schoolName: string
    email: string
    password: string
    dateOfestablishment?: string | null
    address?: SchoolAddressCreateNestedManyWithoutSchoolInput
    NumOfStudents?: number | null
    NumOfTeachers?: number | null
    NumOfNonTeachingStaff?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SchoolUncheckedCreateInput = {
    id?: string
    schoolName: string
    email: string
    password: string
    dateOfestablishment?: string | null
    address?: SchoolAddressUncheckedCreateNestedManyWithoutSchoolInput
    NumOfStudents?: number | null
    NumOfTeachers?: number | null
    NumOfNonTeachingStaff?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SchoolUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateOfestablishment?: NullableStringFieldUpdateOperationsInput | string | null
    address?: SchoolAddressUpdateManyWithoutSchoolNestedInput
    NumOfStudents?: NullableIntFieldUpdateOperationsInput | number | null
    NumOfTeachers?: NullableIntFieldUpdateOperationsInput | number | null
    NumOfNonTeachingStaff?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateOfestablishment?: NullableStringFieldUpdateOperationsInput | string | null
    address?: SchoolAddressUncheckedUpdateManyWithoutSchoolNestedInput
    NumOfStudents?: NullableIntFieldUpdateOperationsInput | number | null
    NumOfTeachers?: NullableIntFieldUpdateOperationsInput | number | null
    NumOfNonTeachingStaff?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolCreateManyInput = {
    id?: string
    schoolName: string
    email: string
    password: string
    dateOfestablishment?: string | null
    NumOfStudents?: number | null
    NumOfTeachers?: number | null
    NumOfNonTeachingStaff?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SchoolUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateOfestablishment?: NullableStringFieldUpdateOperationsInput | string | null
    NumOfStudents?: NullableIntFieldUpdateOperationsInput | number | null
    NumOfTeachers?: NullableIntFieldUpdateOperationsInput | number | null
    NumOfNonTeachingStaff?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateOfestablishment?: NullableStringFieldUpdateOperationsInput | string | null
    NumOfStudents?: NullableIntFieldUpdateOperationsInput | number | null
    NumOfTeachers?: NullableIntFieldUpdateOperationsInput | number | null
    NumOfNonTeachingStaff?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolAddressCreateInput = {
    id?: string
    school: SchoolCreateNestedOneWithoutAddressInput
    location?: SchoolAddressCreatelocationInput | Enumerable<string>
    POBox: string
    email: string
    website?: string | null
    GPS: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SchoolAddressUncheckedCreateInput = {
    id?: string
    schoolId: string
    location?: SchoolAddressCreatelocationInput | Enumerable<string>
    POBox: string
    email: string
    website?: string | null
    GPS: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SchoolAddressUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    school?: SchoolUpdateOneRequiredWithoutAddressNestedInput
    location?: SchoolAddressUpdatelocationInput | Enumerable<string>
    POBox?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    GPS?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolAddressUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    location?: SchoolAddressUpdatelocationInput | Enumerable<string>
    POBox?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    GPS?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolAddressCreateManyInput = {
    id?: string
    schoolId: string
    location?: SchoolAddressCreatelocationInput | Enumerable<string>
    POBox: string
    email: string
    website?: string | null
    GPS: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SchoolAddressUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    location?: SchoolAddressUpdatelocationInput | Enumerable<string>
    POBox?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    GPS?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolAddressUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    location?: SchoolAddressUpdatelocationInput | Enumerable<string>
    POBox?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    GPS?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type EnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type UserAddressListRelationFilter = {
    every?: UserAddressWhereInput
    some?: UserAddressWhereInput
    none?: UserAddressWhereInput
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type GuardianListRelationFilter = {
    every?: GuardianWhereInput
    some?: GuardianWhereInput
    none?: GuardianWhereInput
  }

  export type ClassListRelationFilter = {
    every?: ClassWhereInput
    some?: ClassWhereInput
    none?: ClassWhereInput
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type UserAddressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GuardianOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClassOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    age?: SortOrder
    role?: SortOrder
    profilePic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    age?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    age?: SortOrder
    role?: SortOrder
    profilePic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    age?: SortOrder
    role?: SortOrder
    profilePic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    age?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type EnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type GuardianCountOrderByAggregateInput = {
    id?: SortOrder
    father?: SortOrder
    mother?: SortOrder
    other?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GuardianMaxOrderByAggregateInput = {
    id?: SortOrder
    father?: SortOrder
    mother?: SortOrder
    other?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GuardianMinOrderByAggregateInput = {
    id?: SortOrder
    father?: SortOrder
    mother?: SortOrder
    other?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAddressCountOrderByAggregateInput = {
    id?: SortOrder
    phoneNumber?: SortOrder
    GPS?: SortOrder
    NearestLandMark?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAddressMaxOrderByAggregateInput = {
    id?: SortOrder
    phoneNumber?: SortOrder
    GPS?: SortOrder
    NearestLandMark?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAddressMinOrderByAggregateInput = {
    id?: SortOrder
    phoneNumber?: SortOrder
    GPS?: SortOrder
    NearestLandMark?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type ClassCountOrderByAggregateInput = {
    id?: SortOrder
    classType?: SortOrder
    numOfStudents?: SortOrder
    teacher?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClassAvgOrderByAggregateInput = {
    numOfStudents?: SortOrder
  }

  export type ClassMaxOrderByAggregateInput = {
    id?: SortOrder
    classType?: SortOrder
    numOfStudents?: SortOrder
    teacher?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClassMinOrderByAggregateInput = {
    id?: SortOrder
    classType?: SortOrder
    numOfStudents?: SortOrder
    teacher?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClassSumOrderByAggregateInput = {
    numOfStudents?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type SchoolAddressListRelationFilter = {
    every?: SchoolAddressWhereInput
    some?: SchoolAddressWhereInput
    none?: SchoolAddressWhereInput
  }

  export type SchoolAddressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SchoolCountOrderByAggregateInput = {
    id?: SortOrder
    schoolName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    dateOfestablishment?: SortOrder
    NumOfStudents?: SortOrder
    NumOfTeachers?: SortOrder
    NumOfNonTeachingStaff?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SchoolAvgOrderByAggregateInput = {
    NumOfStudents?: SortOrder
    NumOfTeachers?: SortOrder
    NumOfNonTeachingStaff?: SortOrder
  }

  export type SchoolMaxOrderByAggregateInput = {
    id?: SortOrder
    schoolName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    dateOfestablishment?: SortOrder
    NumOfStudents?: SortOrder
    NumOfTeachers?: SortOrder
    NumOfNonTeachingStaff?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SchoolMinOrderByAggregateInput = {
    id?: SortOrder
    schoolName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    dateOfestablishment?: SortOrder
    NumOfStudents?: SortOrder
    NumOfTeachers?: SortOrder
    NumOfNonTeachingStaff?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SchoolSumOrderByAggregateInput = {
    NumOfStudents?: SortOrder
    NumOfTeachers?: SortOrder
    NumOfNonTeachingStaff?: SortOrder
  }

  export type SchoolRelationFilter = {
    is?: SchoolWhereInput
    isNot?: SchoolWhereInput
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
    has?: string | null
    hasEvery?: Enumerable<string>
    hasSome?: Enumerable<string>
    isEmpty?: boolean
  }

  export type SchoolAddressCountOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    location?: SortOrder
    POBox?: SortOrder
    email?: SortOrder
    website?: SortOrder
    GPS?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SchoolAddressMaxOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    POBox?: SortOrder
    email?: SortOrder
    website?: SortOrder
    GPS?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SchoolAddressMinOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    POBox?: SortOrder
    email?: SortOrder
    website?: SortOrder
    GPS?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAddressCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserAddressCreateWithoutUserInput>, Enumerable<UserAddressUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserAddressCreateOrConnectWithoutUserInput>
    createMany?: UserAddressCreateManyUserInputEnvelope
    connect?: Enumerable<UserAddressWhereUniqueInput>
  }

  export type GuardianCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<GuardianCreateWithoutUserInput>, Enumerable<GuardianUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<GuardianCreateOrConnectWithoutUserInput>
    createMany?: GuardianCreateManyUserInputEnvelope
    connect?: Enumerable<GuardianWhereUniqueInput>
  }

  export type ClassCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ClassCreateWithoutUserInput>, Enumerable<ClassUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ClassCreateOrConnectWithoutUserInput>
    createMany?: ClassCreateManyUserInputEnvelope
    connect?: Enumerable<ClassWhereUniqueInput>
  }

  export type UserAddressUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserAddressCreateWithoutUserInput>, Enumerable<UserAddressUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserAddressCreateOrConnectWithoutUserInput>
    createMany?: UserAddressCreateManyUserInputEnvelope
    connect?: Enumerable<UserAddressWhereUniqueInput>
  }

  export type GuardianUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<GuardianCreateWithoutUserInput>, Enumerable<GuardianUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<GuardianCreateOrConnectWithoutUserInput>
    createMany?: GuardianCreateManyUserInputEnvelope
    connect?: Enumerable<GuardianWhereUniqueInput>
  }

  export type ClassUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ClassCreateWithoutUserInput>, Enumerable<ClassUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ClassCreateOrConnectWithoutUserInput>
    createMany?: ClassCreateManyUserInputEnvelope
    connect?: Enumerable<ClassWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: Role
  }

  export type UserAddressUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UserAddressCreateWithoutUserInput>, Enumerable<UserAddressUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserAddressCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserAddressUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserAddressCreateManyUserInputEnvelope
    set?: Enumerable<UserAddressWhereUniqueInput>
    disconnect?: Enumerable<UserAddressWhereUniqueInput>
    delete?: Enumerable<UserAddressWhereUniqueInput>
    connect?: Enumerable<UserAddressWhereUniqueInput>
    update?: Enumerable<UserAddressUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserAddressUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserAddressScalarWhereInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type GuardianUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<GuardianCreateWithoutUserInput>, Enumerable<GuardianUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<GuardianCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<GuardianUpsertWithWhereUniqueWithoutUserInput>
    createMany?: GuardianCreateManyUserInputEnvelope
    set?: Enumerable<GuardianWhereUniqueInput>
    disconnect?: Enumerable<GuardianWhereUniqueInput>
    delete?: Enumerable<GuardianWhereUniqueInput>
    connect?: Enumerable<GuardianWhereUniqueInput>
    update?: Enumerable<GuardianUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<GuardianUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<GuardianScalarWhereInput>
  }

  export type ClassUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ClassCreateWithoutUserInput>, Enumerable<ClassUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ClassCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ClassUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ClassCreateManyUserInputEnvelope
    set?: Enumerable<ClassWhereUniqueInput>
    disconnect?: Enumerable<ClassWhereUniqueInput>
    delete?: Enumerable<ClassWhereUniqueInput>
    connect?: Enumerable<ClassWhereUniqueInput>
    update?: Enumerable<ClassUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ClassUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ClassScalarWhereInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserAddressUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UserAddressCreateWithoutUserInput>, Enumerable<UserAddressUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserAddressCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserAddressUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserAddressCreateManyUserInputEnvelope
    set?: Enumerable<UserAddressWhereUniqueInput>
    disconnect?: Enumerable<UserAddressWhereUniqueInput>
    delete?: Enumerable<UserAddressWhereUniqueInput>
    connect?: Enumerable<UserAddressWhereUniqueInput>
    update?: Enumerable<UserAddressUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserAddressUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserAddressScalarWhereInput>
  }

  export type GuardianUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<GuardianCreateWithoutUserInput>, Enumerable<GuardianUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<GuardianCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<GuardianUpsertWithWhereUniqueWithoutUserInput>
    createMany?: GuardianCreateManyUserInputEnvelope
    set?: Enumerable<GuardianWhereUniqueInput>
    disconnect?: Enumerable<GuardianWhereUniqueInput>
    delete?: Enumerable<GuardianWhereUniqueInput>
    connect?: Enumerable<GuardianWhereUniqueInput>
    update?: Enumerable<GuardianUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<GuardianUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<GuardianScalarWhereInput>
  }

  export type ClassUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ClassCreateWithoutUserInput>, Enumerable<ClassUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ClassCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ClassUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ClassCreateManyUserInputEnvelope
    set?: Enumerable<ClassWhereUniqueInput>
    disconnect?: Enumerable<ClassWhereUniqueInput>
    delete?: Enumerable<ClassWhereUniqueInput>
    connect?: Enumerable<ClassWhereUniqueInput>
    update?: Enumerable<ClassUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ClassUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ClassScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutGuardianInput = {
    create?: XOR<UserCreateWithoutGuardianInput, UserUncheckedCreateWithoutGuardianInput>
    connectOrCreate?: UserCreateOrConnectWithoutGuardianInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutGuardianNestedInput = {
    create?: XOR<UserCreateWithoutGuardianInput, UserUncheckedCreateWithoutGuardianInput>
    connectOrCreate?: UserCreateOrConnectWithoutGuardianInput
    upsert?: UserUpsertWithoutGuardianInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutGuardianInput, UserUncheckedUpdateWithoutGuardianInput>
  }

  export type UserCreateNestedOneWithoutAddressInput = {
    create?: XOR<UserCreateWithoutAddressInput, UserUncheckedCreateWithoutAddressInput>
    connectOrCreate?: UserCreateOrConnectWithoutAddressInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAddressNestedInput = {
    create?: XOR<UserCreateWithoutAddressInput, UserUncheckedCreateWithoutAddressInput>
    connectOrCreate?: UserCreateOrConnectWithoutAddressInput
    upsert?: UserUpsertWithoutAddressInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutAddressInput, UserUncheckedUpdateWithoutAddressInput>
  }

  export type UserCreateNestedOneWithoutClassInput = {
    create?: XOR<UserCreateWithoutClassInput, UserUncheckedCreateWithoutClassInput>
    connectOrCreate?: UserCreateOrConnectWithoutClassInput
    connect?: UserWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutClassNestedInput = {
    create?: XOR<UserCreateWithoutClassInput, UserUncheckedCreateWithoutClassInput>
    connectOrCreate?: UserCreateOrConnectWithoutClassInput
    upsert?: UserUpsertWithoutClassInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutClassInput, UserUncheckedUpdateWithoutClassInput>
  }

  export type SchoolAddressCreateNestedManyWithoutSchoolInput = {
    create?: XOR<Enumerable<SchoolAddressCreateWithoutSchoolInput>, Enumerable<SchoolAddressUncheckedCreateWithoutSchoolInput>>
    connectOrCreate?: Enumerable<SchoolAddressCreateOrConnectWithoutSchoolInput>
    createMany?: SchoolAddressCreateManySchoolInputEnvelope
    connect?: Enumerable<SchoolAddressWhereUniqueInput>
  }

  export type SchoolAddressUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<Enumerable<SchoolAddressCreateWithoutSchoolInput>, Enumerable<SchoolAddressUncheckedCreateWithoutSchoolInput>>
    connectOrCreate?: Enumerable<SchoolAddressCreateOrConnectWithoutSchoolInput>
    createMany?: SchoolAddressCreateManySchoolInputEnvelope
    connect?: Enumerable<SchoolAddressWhereUniqueInput>
  }

  export type SchoolAddressUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<Enumerable<SchoolAddressCreateWithoutSchoolInput>, Enumerable<SchoolAddressUncheckedCreateWithoutSchoolInput>>
    connectOrCreate?: Enumerable<SchoolAddressCreateOrConnectWithoutSchoolInput>
    upsert?: Enumerable<SchoolAddressUpsertWithWhereUniqueWithoutSchoolInput>
    createMany?: SchoolAddressCreateManySchoolInputEnvelope
    set?: Enumerable<SchoolAddressWhereUniqueInput>
    disconnect?: Enumerable<SchoolAddressWhereUniqueInput>
    delete?: Enumerable<SchoolAddressWhereUniqueInput>
    connect?: Enumerable<SchoolAddressWhereUniqueInput>
    update?: Enumerable<SchoolAddressUpdateWithWhereUniqueWithoutSchoolInput>
    updateMany?: Enumerable<SchoolAddressUpdateManyWithWhereWithoutSchoolInput>
    deleteMany?: Enumerable<SchoolAddressScalarWhereInput>
  }

  export type SchoolAddressUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<Enumerable<SchoolAddressCreateWithoutSchoolInput>, Enumerable<SchoolAddressUncheckedCreateWithoutSchoolInput>>
    connectOrCreate?: Enumerable<SchoolAddressCreateOrConnectWithoutSchoolInput>
    upsert?: Enumerable<SchoolAddressUpsertWithWhereUniqueWithoutSchoolInput>
    createMany?: SchoolAddressCreateManySchoolInputEnvelope
    set?: Enumerable<SchoolAddressWhereUniqueInput>
    disconnect?: Enumerable<SchoolAddressWhereUniqueInput>
    delete?: Enumerable<SchoolAddressWhereUniqueInput>
    connect?: Enumerable<SchoolAddressWhereUniqueInput>
    update?: Enumerable<SchoolAddressUpdateWithWhereUniqueWithoutSchoolInput>
    updateMany?: Enumerable<SchoolAddressUpdateManyWithWhereWithoutSchoolInput>
    deleteMany?: Enumerable<SchoolAddressScalarWhereInput>
  }

  export type SchoolCreateNestedOneWithoutAddressInput = {
    create?: XOR<SchoolCreateWithoutAddressInput, SchoolUncheckedCreateWithoutAddressInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutAddressInput
    connect?: SchoolWhereUniqueInput
  }

  export type SchoolAddressCreatelocationInput = {
    set: Enumerable<string>
  }

  export type SchoolUpdateOneRequiredWithoutAddressNestedInput = {
    create?: XOR<SchoolCreateWithoutAddressInput, SchoolUncheckedCreateWithoutAddressInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutAddressInput
    upsert?: SchoolUpsertWithoutAddressInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<SchoolUpdateWithoutAddressInput, SchoolUncheckedUpdateWithoutAddressInput>
  }

  export type SchoolAddressUpdatelocationInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedEnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedEnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type UserAddressCreateWithoutUserInput = {
    id?: string
    phoneNumber: string
    GPS: string
    NearestLandMark: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAddressUncheckedCreateWithoutUserInput = {
    id?: string
    phoneNumber: string
    GPS: string
    NearestLandMark: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAddressCreateOrConnectWithoutUserInput = {
    where: UserAddressWhereUniqueInput
    create: XOR<UserAddressCreateWithoutUserInput, UserAddressUncheckedCreateWithoutUserInput>
  }

  export type UserAddressCreateManyUserInputEnvelope = {
    data: Enumerable<UserAddressCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type GuardianCreateWithoutUserInput = {
    id?: string
    father: string
    mother: string
    other: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GuardianUncheckedCreateWithoutUserInput = {
    id?: string
    father: string
    mother: string
    other: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GuardianCreateOrConnectWithoutUserInput = {
    where: GuardianWhereUniqueInput
    create: XOR<GuardianCreateWithoutUserInput, GuardianUncheckedCreateWithoutUserInput>
  }

  export type GuardianCreateManyUserInputEnvelope = {
    data: Enumerable<GuardianCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ClassCreateWithoutUserInput = {
    id?: string
    classType: string
    numOfStudents: number
    teacher: Role
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClassUncheckedCreateWithoutUserInput = {
    id?: string
    classType: string
    numOfStudents: number
    teacher: Role
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClassCreateOrConnectWithoutUserInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutUserInput, ClassUncheckedCreateWithoutUserInput>
  }

  export type ClassCreateManyUserInputEnvelope = {
    data: Enumerable<ClassCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type UserAddressUpsertWithWhereUniqueWithoutUserInput = {
    where: UserAddressWhereUniqueInput
    update: XOR<UserAddressUpdateWithoutUserInput, UserAddressUncheckedUpdateWithoutUserInput>
    create: XOR<UserAddressCreateWithoutUserInput, UserAddressUncheckedCreateWithoutUserInput>
  }

  export type UserAddressUpdateWithWhereUniqueWithoutUserInput = {
    where: UserAddressWhereUniqueInput
    data: XOR<UserAddressUpdateWithoutUserInput, UserAddressUncheckedUpdateWithoutUserInput>
  }

  export type UserAddressUpdateManyWithWhereWithoutUserInput = {
    where: UserAddressScalarWhereInput
    data: XOR<UserAddressUpdateManyMutationInput, UserAddressUncheckedUpdateManyWithoutAddressInput>
  }

  export type UserAddressScalarWhereInput = {
    AND?: Enumerable<UserAddressScalarWhereInput>
    OR?: Enumerable<UserAddressScalarWhereInput>
    NOT?: Enumerable<UserAddressScalarWhereInput>
    id?: StringFilter | string
    phoneNumber?: StringFilter | string
    GPS?: StringFilter | string
    NearestLandMark?: StringFilter | string
    userId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type GuardianUpsertWithWhereUniqueWithoutUserInput = {
    where: GuardianWhereUniqueInput
    update: XOR<GuardianUpdateWithoutUserInput, GuardianUncheckedUpdateWithoutUserInput>
    create: XOR<GuardianCreateWithoutUserInput, GuardianUncheckedCreateWithoutUserInput>
  }

  export type GuardianUpdateWithWhereUniqueWithoutUserInput = {
    where: GuardianWhereUniqueInput
    data: XOR<GuardianUpdateWithoutUserInput, GuardianUncheckedUpdateWithoutUserInput>
  }

  export type GuardianUpdateManyWithWhereWithoutUserInput = {
    where: GuardianScalarWhereInput
    data: XOR<GuardianUpdateManyMutationInput, GuardianUncheckedUpdateManyWithoutGuardianInput>
  }

  export type GuardianScalarWhereInput = {
    AND?: Enumerable<GuardianScalarWhereInput>
    OR?: Enumerable<GuardianScalarWhereInput>
    NOT?: Enumerable<GuardianScalarWhereInput>
    id?: StringFilter | string
    father?: StringFilter | string
    mother?: StringFilter | string
    other?: StringFilter | string
    userId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ClassUpsertWithWhereUniqueWithoutUserInput = {
    where: ClassWhereUniqueInput
    update: XOR<ClassUpdateWithoutUserInput, ClassUncheckedUpdateWithoutUserInput>
    create: XOR<ClassCreateWithoutUserInput, ClassUncheckedCreateWithoutUserInput>
  }

  export type ClassUpdateWithWhereUniqueWithoutUserInput = {
    where: ClassWhereUniqueInput
    data: XOR<ClassUpdateWithoutUserInput, ClassUncheckedUpdateWithoutUserInput>
  }

  export type ClassUpdateManyWithWhereWithoutUserInput = {
    where: ClassScalarWhereInput
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyWithoutClassInput>
  }

  export type ClassScalarWhereInput = {
    AND?: Enumerable<ClassScalarWhereInput>
    OR?: Enumerable<ClassScalarWhereInput>
    NOT?: Enumerable<ClassScalarWhereInput>
    id?: StringFilter | string
    classType?: StringFilter | string
    numOfStudents?: IntFilter | number
    teacher?: EnumRoleFilter | Role
    userId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserCreateWithoutGuardianInput = {
    id?: string
    firstname: string
    email: string
    password: string
    age?: number | null
    role?: Role
    address?: UserAddressCreateNestedManyWithoutUserInput
    profilePic?: string | null
    class?: ClassCreateNestedManyWithoutUserInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutGuardianInput = {
    id?: string
    firstname: string
    email: string
    password: string
    age?: number | null
    role?: Role
    address?: UserAddressUncheckedCreateNestedManyWithoutUserInput
    profilePic?: string | null
    class?: ClassUncheckedCreateNestedManyWithoutUserInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutGuardianInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGuardianInput, UserUncheckedCreateWithoutGuardianInput>
  }

  export type UserUpsertWithoutGuardianInput = {
    update: XOR<UserUpdateWithoutGuardianInput, UserUncheckedUpdateWithoutGuardianInput>
    create: XOR<UserCreateWithoutGuardianInput, UserUncheckedCreateWithoutGuardianInput>
  }

  export type UserUpdateWithoutGuardianInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    address?: UserAddressUpdateManyWithoutUserNestedInput
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    class?: ClassUpdateManyWithoutUserNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutGuardianInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    address?: UserAddressUncheckedUpdateManyWithoutUserNestedInput
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    class?: ClassUncheckedUpdateManyWithoutUserNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutAddressInput = {
    id?: string
    firstname: string
    email: string
    password: string
    age?: number | null
    role?: Role
    profilePic?: string | null
    guardian?: GuardianCreateNestedManyWithoutUserInput
    class?: ClassCreateNestedManyWithoutUserInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutAddressInput = {
    id?: string
    firstname: string
    email: string
    password: string
    age?: number | null
    role?: Role
    profilePic?: string | null
    guardian?: GuardianUncheckedCreateNestedManyWithoutUserInput
    class?: ClassUncheckedCreateNestedManyWithoutUserInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutAddressInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAddressInput, UserUncheckedCreateWithoutAddressInput>
  }

  export type UserUpsertWithoutAddressInput = {
    update: XOR<UserUpdateWithoutAddressInput, UserUncheckedUpdateWithoutAddressInput>
    create: XOR<UserCreateWithoutAddressInput, UserUncheckedCreateWithoutAddressInput>
  }

  export type UserUpdateWithoutAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    guardian?: GuardianUpdateManyWithoutUserNestedInput
    class?: ClassUpdateManyWithoutUserNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    guardian?: GuardianUncheckedUpdateManyWithoutUserNestedInput
    class?: ClassUncheckedUpdateManyWithoutUserNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutClassInput = {
    id?: string
    firstname: string
    email: string
    password: string
    age?: number | null
    role?: Role
    address?: UserAddressCreateNestedManyWithoutUserInput
    profilePic?: string | null
    guardian?: GuardianCreateNestedManyWithoutUserInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutClassInput = {
    id?: string
    firstname: string
    email: string
    password: string
    age?: number | null
    role?: Role
    address?: UserAddressUncheckedCreateNestedManyWithoutUserInput
    profilePic?: string | null
    guardian?: GuardianUncheckedCreateNestedManyWithoutUserInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutClassInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutClassInput, UserUncheckedCreateWithoutClassInput>
  }

  export type UserUpsertWithoutClassInput = {
    update: XOR<UserUpdateWithoutClassInput, UserUncheckedUpdateWithoutClassInput>
    create: XOR<UserCreateWithoutClassInput, UserUncheckedCreateWithoutClassInput>
  }

  export type UserUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    address?: UserAddressUpdateManyWithoutUserNestedInput
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    guardian?: GuardianUpdateManyWithoutUserNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    address?: UserAddressUncheckedUpdateManyWithoutUserNestedInput
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    guardian?: GuardianUncheckedUpdateManyWithoutUserNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolAddressCreateWithoutSchoolInput = {
    id?: string
    location?: SchoolAddressCreatelocationInput | Enumerable<string>
    POBox: string
    email: string
    website?: string | null
    GPS: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SchoolAddressUncheckedCreateWithoutSchoolInput = {
    id?: string
    location?: SchoolAddressCreatelocationInput | Enumerable<string>
    POBox: string
    email: string
    website?: string | null
    GPS: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SchoolAddressCreateOrConnectWithoutSchoolInput = {
    where: SchoolAddressWhereUniqueInput
    create: XOR<SchoolAddressCreateWithoutSchoolInput, SchoolAddressUncheckedCreateWithoutSchoolInput>
  }

  export type SchoolAddressCreateManySchoolInputEnvelope = {
    data: Enumerable<SchoolAddressCreateManySchoolInput>
    skipDuplicates?: boolean
  }

  export type SchoolAddressUpsertWithWhereUniqueWithoutSchoolInput = {
    where: SchoolAddressWhereUniqueInput
    update: XOR<SchoolAddressUpdateWithoutSchoolInput, SchoolAddressUncheckedUpdateWithoutSchoolInput>
    create: XOR<SchoolAddressCreateWithoutSchoolInput, SchoolAddressUncheckedCreateWithoutSchoolInput>
  }

  export type SchoolAddressUpdateWithWhereUniqueWithoutSchoolInput = {
    where: SchoolAddressWhereUniqueInput
    data: XOR<SchoolAddressUpdateWithoutSchoolInput, SchoolAddressUncheckedUpdateWithoutSchoolInput>
  }

  export type SchoolAddressUpdateManyWithWhereWithoutSchoolInput = {
    where: SchoolAddressScalarWhereInput
    data: XOR<SchoolAddressUpdateManyMutationInput, SchoolAddressUncheckedUpdateManyWithoutAddressInput>
  }

  export type SchoolAddressScalarWhereInput = {
    AND?: Enumerable<SchoolAddressScalarWhereInput>
    OR?: Enumerable<SchoolAddressScalarWhereInput>
    NOT?: Enumerable<SchoolAddressScalarWhereInput>
    id?: StringFilter | string
    schoolId?: StringFilter | string
    location?: StringNullableListFilter
    POBox?: StringFilter | string
    email?: StringFilter | string
    website?: StringNullableFilter | string | null
    GPS?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type SchoolCreateWithoutAddressInput = {
    id?: string
    schoolName: string
    email: string
    password: string
    dateOfestablishment?: string | null
    NumOfStudents?: number | null
    NumOfTeachers?: number | null
    NumOfNonTeachingStaff?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SchoolUncheckedCreateWithoutAddressInput = {
    id?: string
    schoolName: string
    email: string
    password: string
    dateOfestablishment?: string | null
    NumOfStudents?: number | null
    NumOfTeachers?: number | null
    NumOfNonTeachingStaff?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SchoolCreateOrConnectWithoutAddressInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutAddressInput, SchoolUncheckedCreateWithoutAddressInput>
  }

  export type SchoolUpsertWithoutAddressInput = {
    update: XOR<SchoolUpdateWithoutAddressInput, SchoolUncheckedUpdateWithoutAddressInput>
    create: XOR<SchoolCreateWithoutAddressInput, SchoolUncheckedCreateWithoutAddressInput>
  }

  export type SchoolUpdateWithoutAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateOfestablishment?: NullableStringFieldUpdateOperationsInput | string | null
    NumOfStudents?: NullableIntFieldUpdateOperationsInput | number | null
    NumOfTeachers?: NullableIntFieldUpdateOperationsInput | number | null
    NumOfNonTeachingStaff?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolUncheckedUpdateWithoutAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateOfestablishment?: NullableStringFieldUpdateOperationsInput | string | null
    NumOfStudents?: NullableIntFieldUpdateOperationsInput | number | null
    NumOfTeachers?: NullableIntFieldUpdateOperationsInput | number | null
    NumOfNonTeachingStaff?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAddressCreateManyUserInput = {
    id?: string
    phoneNumber: string
    GPS: string
    NearestLandMark: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GuardianCreateManyUserInput = {
    id?: string
    father: string
    mother: string
    other: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClassCreateManyUserInput = {
    id?: string
    classType: string
    numOfStudents: number
    teacher: Role
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserAddressUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    GPS?: StringFieldUpdateOperationsInput | string
    NearestLandMark?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAddressUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    GPS?: StringFieldUpdateOperationsInput | string
    NearestLandMark?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAddressUncheckedUpdateManyWithoutAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    GPS?: StringFieldUpdateOperationsInput | string
    NearestLandMark?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuardianUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    father?: StringFieldUpdateOperationsInput | string
    mother?: StringFieldUpdateOperationsInput | string
    other?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuardianUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    father?: StringFieldUpdateOperationsInput | string
    mother?: StringFieldUpdateOperationsInput | string
    other?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuardianUncheckedUpdateManyWithoutGuardianInput = {
    id?: StringFieldUpdateOperationsInput | string
    father?: StringFieldUpdateOperationsInput | string
    mother?: StringFieldUpdateOperationsInput | string
    other?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    classType?: StringFieldUpdateOperationsInput | string
    numOfStudents?: IntFieldUpdateOperationsInput | number
    teacher?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    classType?: StringFieldUpdateOperationsInput | string
    numOfStudents?: IntFieldUpdateOperationsInput | number
    teacher?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassUncheckedUpdateManyWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    classType?: StringFieldUpdateOperationsInput | string
    numOfStudents?: IntFieldUpdateOperationsInput | number
    teacher?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolAddressCreateManySchoolInput = {
    id?: string
    location?: SchoolAddressCreatelocationInput | Enumerable<string>
    POBox: string
    email: string
    website?: string | null
    GPS: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SchoolAddressUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    location?: SchoolAddressUpdatelocationInput | Enumerable<string>
    POBox?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    GPS?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolAddressUncheckedUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    location?: SchoolAddressUpdatelocationInput | Enumerable<string>
    POBox?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    GPS?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolAddressUncheckedUpdateManyWithoutAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    location?: SchoolAddressUpdatelocationInput | Enumerable<string>
    POBox?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    GPS?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}