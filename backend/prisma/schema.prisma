// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 

// DB Tables

model User{
  id String @id @default(cuid())
  fullname String
  email String @unique
  password String
  age Int?
  role Role @default(student)
  gender String?
  isPrefect Boolean? @default(false)
  guardian Guardian?
  stage Stage?
  address UserAddress?
  score Scores?
  profilePic String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Guardian{
  father String?
  mother String?
  other String?
  student User @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@id([studentId])

}

model UserAddress{
  phoneNumber String?
  GPS String?
  location String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@id([userId])
}

model Stage{
  classType classCategory @default(Primary)
  mainStage String?
  student User @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String 
  teacher String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@id([studentId])
}


model School{
  id String @id @default(cuid())
  schoolName String
  email String @unique
  password String
  phoneNumber String?
  dateOfestablishment String?
  address SchoolAddress[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model SchoolAddress{
  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId String
  location String[]
  POBox String
  website String?
  GPS String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@id([schoolId])
}

model Scores {
  testScore Float[]
  examScore Float?
  student User @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String 
  @@id([studentId])
}

enum Role {
  superAdmin
  admin
  student
  teacher
  headmaster
  proprietor
  nonteaching
}

enum classCategory {
  Nursery
  Primary
  JuniorHigh
}

